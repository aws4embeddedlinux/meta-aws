name: build-test-recipe
on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'master-next'
    paths:
      - '**.bb'
      - '**.inc'

jobs:
  generate-matrix:
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
    matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Check changed files
      id: diff
      run: |
        # See https://github.community/t/check-pushed-file-changes-with-git-diff-tree-in-github-actions/17220/10
        if [ $GITHUB_BASE_REF ]; then
          # Pull Request
          git fetch origin $GITHUB_BASE_REF --depth=1
          export DIFF=$( git diff --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )
          echo "Diff between origin/$GITHUB_BASE_REF and $GITHUB_SHA"
        else
          # Push
          git fetch origin ${{ github.event.before }} --depth=1
          export DIFF=$( git diff --name-only ${{ github.event.before }} $GITHUB_SHA )
          echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
        fi
        echo "$DIFF"
        # Escape newlines (replace \n with %0A)
        echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"
    - name: Set matrix for build
      id: set-matrix
      run: |
        # See https://stackoverflow.com/a/62953566/11948346
        DIFF="${{ steps.diff.outputs.diff }}"
        JSON="{"include":["
          # Loop by lines
          while read path; 
          do
            # Set $directory to substring before /
            directory="$( echo $path | cut -d'/' -f1 -s )"

            if [ -z "$directory" ]; then
              continue # Exclude root directory
            elif [ "$directory" == docs ]; then
              continue # Exclude docs directory
            elif [ "$path" == *.rst ]; then
              continue # Exclude *.rst files
            fi

            # Set $os. "ubuntu-latest" by default. if directory starts with windows, then "windows-latest"
            os="ubuntu-latest"
            if [ "$directory" == windows* ]; then
              os="windows-latest"
            fi

            # Add build to the matrix only if it is not already included
            JSONline="{\"directory\": \"$directory\", \"os\": \"$os\"},"
            if [[ "$JSON" != *"$JSONline"* ]]; then
              JSON="$JSON$JSONline"
            fi
          done &lt;&lt;&lt; "$DIFF"

          # Remove last "," and add closing brackets
          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          JSON="$JSON]}"
          echo $JSON

          # Set output
          echo "::set-output name=matrix::$( echo "$JSON" )"
  build:
    name: Build "${{ matrix.directory }}" on ${{ matrix.os }}
    needs: generate-matrix
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: |
        cd ${{ matrix.directory }}
        echo "${{ matrix.directory }} ${{ matrix.os }}"
  update:
    name: build
    runs-on: codebuild-${{ vars.CODEBUILD_RUNNER_NAME }}-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Checkout meta-aws
        uses: actions/checkout@v4
        with: 
            path: ${{ github.workspace }}/meta-aws
      - name: Checkout meta-oe
        uses: actions/checkout@v4
        with:
          repository: openembedded/meta-openembedded
          path: ${{ github.workspace }}/meta-openembedded
      - name: Checkout poky
        run: |
          git clone git://git.yoctoproject.org/poky --single-branch  ${{ github.workspace }}/poky
      - name: Run build
        run: |
           apt-get -y install sudo 
           chown yoctouser /sstate-cache
           chown yoctouser /downloads
           chown -R yoctouser .
           sysctl vm.mmap_min_addr=65536
           env
           sudo -u yoctouser bash -c '\
           whoami && \
           id && \
           cd  ${{ github.workspace }} && 
           source poky/oe-init-build-env build
           bitbake-layers add-layer ../meta-openembedded/meta-oe &&
           bitbake-layers add-layer ../meta-openembedded/meta-python &&
           bitbake-layers add-layer ../meta-openembedded/meta-networking &&
           bitbake-layers add-layer ../meta-openembedded/meta-multimedia &&
           bitbake-layers add-layer ../meta-aws &&           
           export SSTATE_DIR=/sstate-cache && \
           export DL_DIR=/downloads && \
           export BB_ENV_PASSTHROUGH_ADDITIONS="$BB_ENV_PASSTHROUGH_ADDITIONS SSTATE_DIR DL_DIR" && \
           bitbake aws-cli '
      

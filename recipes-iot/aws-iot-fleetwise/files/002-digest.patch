Upstream-Status: Submitted [https://github.com/aws/aws-iot-fleetwise-edge/issues/119]

Index: git/src/CacheAndPersist.cpp
===================================================================
--- git.orig/src/CacheAndPersist.cpp
+++ git/src/CacheAndPersist.cpp
@@ -22,16 +22,15 @@ namespace IoTFleetWise
 {

 constexpr auto SHA1_DIGEST_SIZE_BYTES = sizeof( boost::uuids::detail::sha1::digest_type );
-constexpr auto SHA1_DIGEST_SIZE_WORDS = SHA1_DIGEST_SIZE_BYTES / sizeof( uint32_t );

 namespace
 {
-std::string sha1DigestAsString( uint32_t ( &digest )[SHA1_DIGEST_SIZE_WORDS] )
+std::string sha1DigestAsString( unsigned char ( &digest )[SHA1_DIGEST_SIZE_BYTES] )
 {
     std::stringstream hashString;
-    for ( unsigned int i = 0; i < SHA1_DIGEST_SIZE_WORDS; i++ )
+    for ( unsigned int i = 0; i < SHA1_DIGEST_SIZE_BYTES; i++ )
     {
-        hashString << std::hex << std::setw( sizeof( uint32_t ) * 2 ) << std::setfill( '0' ) << digest[i];
+        hashString << std::hex << std::setw( sizeof( unsigned char ) * 2 ) << std::setfill( '0' ) << digest[i];
     }
     return hashString.str();
 }
@@ -50,7 +49,7 @@ calculateSha1( const uint8_t *buf, size_
         // SHA1 is 2^64 bits, so it should never happen in our case.
         FWE_FATAL_ASSERT( false, "Exception while calculating SHA1: " + std::string( e.what() ) );
     }
-    uint32_t digest[SHA1_DIGEST_SIZE_WORDS];
+    unsigned char digest[SHA1_DIGEST_SIZE_BYTES];
     sha1.get_digest( digest );
     return sha1DigestAsString( digest );
 }
@@ -255,7 +254,7 @@ CacheAndPersist::write( std::streambuf &
         file.write( chunkPtr, count );
     }

-    unsigned int digest[SHA1_DIGEST_SIZE_WORDS];
+    unsigned char digest[SHA1_DIGEST_SIZE_BYTES];
     sha1.get_digest( digest );
     auto checksumStatus = writeChecksumForFile( path.string(), sha1DigestAsString( digest ) );
     if ( checksumStatus != ErrorCode::SUCCESS )
Index: git/src/CollectionSchemeIngestion.cpp
===================================================================
--- git.orig/src/CollectionSchemeIngestion.cpp
+++ git/src/CollectionSchemeIngestion.cpp
@@ -705,7 +705,7 @@ CollectionSchemeIngestion::serializeNode
                 FWE_LOG_ERROR( "Error calculating SHA1: " + std::string( e.what() ) );
                 return nullptr;
             }
-            uint32_t digest[5]{}; // SHA1 is 160-bit
+            unsigned char digest[20]{}; // SHA1 is 160-bit
             invocationHash.get_digest( digest );
             // Use the first 64-bits:
             currentNode->function.customFunctionInvocationId =

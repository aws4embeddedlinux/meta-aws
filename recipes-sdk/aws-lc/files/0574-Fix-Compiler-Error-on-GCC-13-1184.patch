From cf16b1c944b7e4c6273552989e6974daa7a8d48e Mon Sep 17 00:00:00 2001
From: Sean McGrail <549813+skmcgrail@users.noreply.github.com>
Date: Tue, 12 Sep 2023 10:17:10 -0700
Subject: [PATCH] Fix Compiler Error on GCC 13 (#1184)

---
 crypto/bio/bio_test.cc      | 8 ++++++--
 ssl/test/settings_writer.cc | 8 ++++++--
 ssl/test/ssl_transfer.cc    | 9 +++++++--
 3 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/crypto/bio/bio_test.cc b/crypto/bio/bio_test.cc
index 6fdc39a42..ee35dc3bb 100644
--- a/crypto/bio/bio_test.cc
+++ b/crypto/bio/bio_test.cc
@@ -425,8 +425,12 @@ TEST(BIOTest, Gets) {
       check_bio_gets(bio.get());
     }
 
-    using ScopedFILE = std::unique_ptr<FILE, decltype(&fclose)>;
-    ScopedFILE file(tmpfile(), fclose);
+    struct fclose_deleter {
+      void operator()(FILE *f) const { fclose(f); }
+    };
+
+    using ScopedFILE = std::unique_ptr<FILE, fclose_deleter>;
+    ScopedFILE file(tmpfile());
 #if defined(OPENSSL_ANDROID)
     // On Android, when running from an APK, |tmpfile| does not work. See
     // b/36991167#comment8.
diff --git a/ssl/test/settings_writer.cc b/ssl/test/settings_writer.cc
index 8605222fe..5309e61be 100644
--- a/ssl/test/settings_writer.cc
+++ b/ssl/test/settings_writer.cc
@@ -75,8 +75,12 @@ bool SettingsWriter::Commit() {
   }
   bssl::UniquePtr<uint8_t> free_settings(settings);
 
-  using ScopedFILE = std::unique_ptr<FILE, decltype(&fclose)>;
-  ScopedFILE file(fopen(path_.c_str(), "w"), fclose);
+  struct fclose_deleter {
+    void operator()(FILE *f) const { fclose(f); }
+  };
+
+  using ScopedFILE = std::unique_ptr<FILE, fclose_deleter>;
+  ScopedFILE file(fopen(path_.c_str(), "w"));
   if (!file) {
     return false;
   }
diff --git a/ssl/test/ssl_transfer.cc b/ssl/test/ssl_transfer.cc
index 64bae3c28..01e4d0c9b 100644
--- a/ssl/test/ssl_transfer.cc
+++ b/ssl/test/ssl_transfer.cc
@@ -21,9 +21,14 @@ static bool WriteData(std::string prefix, const uint8_t *input, size_t len) {
     // WriteData is not needed because related config is not enabled.
     return true;
   }
-  using ScopedFILE = std::unique_ptr<FILE, decltype(&fclose)>;
+
+  struct fclose_deleter {
+    void operator()(FILE *f) const { fclose(f); }
+  };
+
+  using ScopedFILE = std::unique_ptr<FILE, fclose_deleter>;
   std::string path = prefix + "-" + std::to_string(rand());
-  ScopedFILE file(fopen(path.c_str(), "w"), fclose);
+  ScopedFILE file(fopen(path.c_str(), "w"));
   if (!file) {
     return false;
   }

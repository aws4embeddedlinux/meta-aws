From d4faa69f8519de13456bbfc3bddcc14afb528447 Mon Sep 17 00:00:00 2001
From: Andrew Hopkins <andhop@amazon.com>
Date: Mon, 22 May 2023 14:25:56 -0700
Subject: [PATCH] Update speed.cc to support older versions of AWS-LC that have
 missing APIs. (#1018)

---
 tool/bssl_bm.h |  1 -
 tool/speed.cc  | 15 +++++++++------
 2 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/tool/bssl_bm.h b/tool/bssl_bm.h
index 3e53a0857..247e36886 100644
--- a/tool/bssl_bm.h
+++ b/tool/bssl_bm.h
@@ -8,7 +8,6 @@
 #include <openssl/aes.h>
 #include <openssl/base64.h>
 #include <openssl/bn.h>
-#include "openssl/ctrdrbg.h"
 #include <openssl/curve25519.h>
 #include <openssl/crypto.h>
 #include <openssl/dh.h>
diff --git a/tool/speed.cc b/tool/speed.cc
index e5e27b9bc..b6a1bd9be 100644
--- a/tool/speed.cc
+++ b/tool/speed.cc
@@ -724,7 +724,7 @@ static bool SpeedAEADSeal(const EVP_AEAD *aead, const std::string &name,
                           size_t ad_len, const std::string &selected) {
   return SpeedAEAD(aead, name, ad_len, selected, evp_aead_seal);
 }
-
+#if AWSLC_API_VERSION > 16
 static bool SpeedSingleKEM(const std::string &name, int nid, const std::string &selected) {
   if (!selected.empty() && name.find(selected) == std::string::npos) {
     return true;
@@ -871,6 +871,7 @@ static bool SpeedDigestSign(const std::string &selected) {
 
 #endif
 
+#endif
 #endif
 
 static bool SpeedAESBlock(const std::string &name, unsigned bits,
@@ -2148,7 +2149,7 @@ static bool SpeedDHcheck(std::string selected) {
   return true;
 }
 
-#if !defined(OPENSSL_BENCHMARK) && !defined(BORINGSSL_BENCHMARK)
+#if !defined(OPENSSL_BENCHMARK) && !defined(BORINGSSL_BENCHMARK) && AWSLC_API_VERSION > 16
 static bool SpeedPKCS8(const std::string &selected) {
   if (!selected.empty() && selected.find("pkcs8") == std::string::npos) {
     return true;
@@ -2303,7 +2304,7 @@ static bool parseCommaArgumentToGlobalVector(std::vector<size_t> &vector,
 }
 
 bool Speed(const std::vector<std::string> &args) {
-#if defined(OPENSSL_IS_AWSLC)
+#if defined(OPENSSL_IS_AWSLC) && AWSLC_API_VERSION > 16
   // For mainline AWS-LC this is a no-op, however if speed.cc built with an old
   // branch of AWS-LC SHA3 might be disabled by default and fail the benchmark.
   EVP_MD_unstable_sha3_enable(true);
@@ -2378,7 +2379,7 @@ bool Speed(const std::vector<std::string> &args) {
      !SpeedHash(EVP_sha384(), "SHA-384", selected) ||
      !SpeedHash(EVP_sha512(), "SHA-512", selected) ||
      // OpenSSL 1.0 doesn't support SHA3.
-#if !defined(OPENSSL_1_0_BENCHMARK)
+#if !defined(OPENSSL_1_0_BENCHMARK) && AWSLC_API_VERSION > 16
      !SpeedHash(EVP_sha3_224(), "SHA3-224", selected) ||
      !SpeedHash(EVP_sha3_256(), "SHA3-256", selected) ||
      !SpeedHash(EVP_sha3_384(), "SHA3-384", selected) ||
@@ -2409,8 +2410,10 @@ bool Speed(const std::vector<std::string> &args) {
      !SpeedDHcheck(selected)
 #if !defined(OPENSSL_BENCHMARK)
      ||
+#if AWSLC_API_VERSION > 16
      !SpeedKEM(selected) ||
-#if defined(ENABLE_DILITHIUM)
+#endif
+#if defined(ENABLE_DILITHIUM) && AWSLC_API_VERSION > 20
      !SpeedDigestSign(selected) ||
 #endif
      !SpeedAEADSeal(EVP_aead_aes_128_gcm(), "AEAD-AES-128-GCM", kTLSADLen, selected) ||
@@ -2443,7 +2446,7 @@ bool Speed(const std::vector<std::string> &args) {
      !SpeedTrustToken("TrustToken-Exp2PMB-Batch1", TRUST_TOKEN_experiment_v2_pmb(), 1, selected) ||
      !SpeedTrustToken("TrustToken-Exp2PMB-Batch10", TRUST_TOKEN_experiment_v2_pmb(), 10, selected) ||
 #endif
-#if !defined(OPENSSL_BENCHMARK) && !defined(BORINGSSL_BENCHMARK)
+#if !defined(OPENSSL_BENCHMARK) && !defined(BORINGSSL_BENCHMARK) && AWSLC_API_VERSION > 16
      !SpeedPKCS8(selected) ||
 #endif
      !SpeedBase64(selected) ||

From 3385b607629b73fbeeb23147de50e1f850584050 Mon Sep 17 00:00:00 2001
From: liuxiang88 <94350585+liuxiang88@users.noreply.github.com>
Date: Wed, 6 Sep 2023 01:25:07 +0800
Subject: [PATCH] Add support for LoongArch. (#1137)

Signed-off-by: liuxiang88 <liuxiang@loongson.cn>
---
 CMakeLists.txt                            | 2 ++
 crypto/fipsmodule/rand/getrandom_fillin.h | 2 ++
 crypto/fipsmodule/sha/keccak1600.c        | 4 ++--
 include/openssl/base.h                    | 3 +++
 4 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a449128d4..932e37ecd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -712,6 +712,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "powerpc64le|ppc64le")
   set(ARCH "ppc64le")
 elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "riscv64")
   set(ARCH "riscv64")
+elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "loongarch64")
+  set(ARCH "loongarch64")
 else()
   message(STATUS "Unknown processor found. Using generic implementations. Processor:" ${CMAKE_SYSTEM_PROCESSOR})
   set(ARCH "generic")
diff --git a/crypto/fipsmodule/rand/getrandom_fillin.h b/crypto/fipsmodule/rand/getrandom_fillin.h
index c0dea35be..af61f7c60 100644
--- a/crypto/fipsmodule/rand/getrandom_fillin.h
+++ b/crypto/fipsmodule/rand/getrandom_fillin.h
@@ -34,6 +34,8 @@
 #define EXPECTED_NR_getrandom 359
 #elif defined(OPENSSL_RISCV64)
 #define EXPECTED_NR_getrandom 278
+#elif defined(OPENSSL_LOONGARCH64)
+#define EXPECTED_NR_getrandom 278
 #endif
 
 #if defined(EXPECTED_NR_getrandom)
diff --git a/crypto/fipsmodule/sha/keccak1600.c b/crypto/fipsmodule/sha/keccak1600.c
index 24f809508..ae3cc0952 100644
--- a/crypto/fipsmodule/sha/keccak1600.c
+++ b/crypto/fipsmodule/sha/keccak1600.c
@@ -10,7 +10,7 @@
 #include <assert.h>
 
 #if defined(__x86_64__) || defined(__aarch64__) || \
-    defined(__mips64) || defined(__ia64) || \
+    defined(__mips64) || defined(__ia64) || defined(__loongarch_lp64) || \
     (defined(__VMS) && !defined(__vax))
 
  // These are available even in ILP32 flavours, but even then they are
@@ -60,7 +60,7 @@ static const uint64_t iotas[] = {
 
 #if defined(__i386) || defined(__i386__) || defined(_M_IX86) || \
     (defined(__x86_64) && !defined(__BMI__)) || defined(_M_X64) || \
-    defined(__mips) || defined(__riscv) || defined(__s390__) || \
+    defined(__mips) || defined(__riscv) || defined(__s390__) || defined(__loongarch__) || \
     defined(__EMSCRIPTEN__)
 
  // These platforms don't support "logical and with complement" instruction.
diff --git a/include/openssl/base.h b/include/openssl/base.h
index afd09af46..288b39efd 100644
--- a/include/openssl/base.h
+++ b/include/openssl/base.h
@@ -113,6 +113,9 @@ extern "C" {
 #define OPENSSL_RISCV64
 #elif defined(__riscv) && __SIZEOF_POINTER__ == 4
 #define OPENSSL_32_BIT
+#elif defined(__loongarch_lp64)
+#define OPENSSL_64_BIT
+#define OPENSSL_LOONGARCH64	
 #elif defined(__pnacl__)
 #define OPENSSL_32_BIT
 #define OPENSSL_PNACL

From e0dbced4d118c93f452e0c6e697b76abc8f2bc5f Mon Sep 17 00:00:00 2001
From: Andrew Hopkins <andhop@amazon.com>
Date: Fri, 2 Jun 2023 16:03:29 -0700
Subject: [PATCH] Add additional DH groups from RFC 7919 (#1039)

* Add ffdhe4096 from RFC 7919 appendix 3. Add DH_new_by_nid which supports NID_ffdhe2048 and NID_ffdhe4096 from RFC 7919
---
 crypto/dh_extra/dh_test.cc      |  226 +++++-
 crypto/err/dh.errordata         |    1 +
 crypto/fipsmodule/dh/dh.c       |  110 ++-
 crypto/fipsmodule/ec/ec_test.cc |    8 -
 crypto/obj/obj_dat.h            |    8 +-
 crypto/obj/obj_mac.num          |    2 +
 crypto/obj/objects.txt          |    4 +
 crypto/test/test_util.cc        |    8 +
 crypto/test/test_util.h         |    4 +
 generated-src/err_data.c        | 1136 ++++++++++++++++---------------
 include/openssl/dh.h            |   10 +
 include/openssl/nid.h           |    6 +
 12 files changed, 901 insertions(+), 622 deletions(-)

diff --git a/crypto/dh_extra/dh_test.cc b/crypto/dh_extra/dh_test.cc
index 7a1707027..5f0216e54 100644
--- a/crypto/dh_extra/dh_test.cc
+++ b/crypto/dh_extra/dh_test.cc
@@ -69,6 +69,7 @@
 #include <openssl/dh.h>
 #include <openssl/err.h>
 #include <openssl/mem.h>
+#include <openssl/nid.h>
 
 #include "../fipsmodule/dh/internal.h"
 #include "../internal.h"
@@ -300,33 +301,216 @@ TEST(DHTest, ASN1) {
   EXPECT_EQ(Bytes(kParamsDSA), Bytes(der, der_len));
 }
 
+static void check_bn_matches_bytes(std::vector<uint8_t> bytes, const BIGNUM*bn) {
+  uint8_t buffer[4096];
+  ASSERT_EQ(BN_bn2bin(bn, buffer), bytes.size());
+  EXPECT_EQ(Bytes(buffer, bytes.size()), Bytes(bytes));
+}
+
+static std::vector<uint8_t> rfc_string_to_bytes(const char *str) {
+  std::string string(str);
+  string.erase(std::remove_if(string.begin(),string.end(), ::isspace),string.end());
+  return HexToBytes(string.c_str());
+
+}
+
 TEST(DHTest, RFC3526) {
   bssl::UniquePtr<BIGNUM> bn(BN_get_rfc3526_prime_1536(nullptr));
   ASSERT_TRUE(bn);
 
-  static const uint8_t kPrime1536[] = {
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f, 0xda, 0xa2,
-      0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b, 0x80, 0xdc, 0x1c, 0xd1,
-      0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6,
-      0x3b, 0x13, 0x9b, 0x22, 0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd,
-      0xef, 0x95, 0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,
-      0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51, 0xc2, 0x45,
-      0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6, 0xf4, 0x4c, 0x42, 0xe9,
-      0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff, 0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed,
-      0xee, 0x38, 0x6b, 0xfb, 0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11,
-      0x7c, 0x4b, 0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,
-      0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda, 0x48, 0x36,
-      0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8, 0xfd, 0x24, 0xcf, 0x5f,
-      0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3, 0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56,
-      0x20, 0x85, 0x52, 0xbb, 0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d,
-      0x67, 0x0c, 0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,
-      0xca, 0x23, 0x73, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  // Taken from section 2
+  std::vector<uint8_t> kPrime1536 = rfc_string_to_bytes(
+    "FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1"
+    "29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD"
+    "EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245"
+    "E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED"
+    "EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D"
+    "C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F"
+    "83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D"
+    "670C354E 4ABC9804 F1746C08 CA237327 FFFFFFFF FFFFFFFF");
+  check_bn_matches_bytes(kPrime1536, bn.get());
+}
+
+
+TEST(DHTest, RFC7919) {
+  // Primes taken from Appendix 1 and 3 of RFC 7919
+  struct testInput{
+    int nid;
+    std::vector<uint8_t> p;
+    std::vector<uint8_t> q;
+  };
+  testInput testInputs[] = {
+      {NID_ffdhe2048,
+           rfc_string_to_bytes(
+              "FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1"
+              "D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9"
+              "7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561"
+              "2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935"
+              "984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735"
+              "30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB"
+              "B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19"
+              "0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61"
+              "9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73"
+              "3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA"
+              "886B4238 61285C97 FFFFFFFF FFFFFFFF"),
+           rfc_string_to_bytes(
+              "7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78"
+              "EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C"
+              "BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0"
+              "9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A"
+              "CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A"
+              "98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD"
+              "DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C"
+              "8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0"
+              "C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9"
+              "9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD"
+              "4435A11C 30942E4B FFFFFFFF FFFFFFFF")},
+      {NID_ffdhe4096,
+           rfc_string_to_bytes(
+                "FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1"
+                "D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9"
+                "7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561"
+                "2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935"
+                "984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735"
+                "30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB"
+                "B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19"
+                "0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61"
+                "9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73"
+                "3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA"
+                "886B4238 611FCFDC DE355B3B 6519035B BC34F4DE F99C0238"
+                "61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA C186D91C"
+                "AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3"
+                "64F2E21E 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D"
+                "ABC52197 9B0DEADA 1DBF9A42 D5C4484E 0ABCD06B FA53DDEF"
+                "3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3 164DF4FB"
+                "7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004"
+                "87F55BA5 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832"
+                "A907600A 918130C4 6DC778F9 71AD0038 092999A3 33CB8B7A"
+                "1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD CEC97DCF"
+                "8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E655F6A"
+                "FFFFFFFF FFFFFFFF"),
+           rfc_string_to_bytes(
+                "7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78"
+                "EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C"
+                "BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0"
+                "9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A"
+                "CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A"
+                "98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD"
+                "DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C"
+                "8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0"
+                "C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9"
+                "9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD"
+                "4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C"
+                "30DA37E4 EB736483 BD6C8E93 48FBFBF7 2CC6587D 60C36C8E"
+                "577F0984 C289C938 5A098649 DE21BCA2 7A7EA229 716BA6E9"
+                "B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06"
+                "D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7"
+                "9E0D9077 1FEACEBE 12F20E95 B34F0F78 B737A961 8B26FA7D"
+                "BC9874F2 72C42BDB 563EAFA1 6B4FB68C 3BB1E78E AA81A002"
+                "43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419"
+                "5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD"
+                "0D0EDC9E B8A0001E 15276754 FCC68566 054148E6 E764BEE7"
+                "C764DAAD 3FC45235 A6DAD428 FA20C170 E345003F 2F32AFB5"
+                "7FFFFFFF FFFFFFFF")}
   };
+  for (const testInput &test : testInputs ) {
+    bssl::UniquePtr<DH> dh(DH_new_by_nid(test.nid));
+    ASSERT_TRUE(dh);
+    check_bn_matches_bytes(test.p, DH_get0_p(dh.get()));
+    check_bn_matches_bytes(test.q, DH_get0_q(dh.get()));
+  }
+}
+
+TEST(DHExpectedTestnputTest, CalculateSharedSecretMatches) {
+  // KAT calculated with the following sage math code:
+  // prime=int("0x[prime for 2048 or 4096]", 16) R=Integers(prime) g = R(2)
+  // client_sk = int("0xABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890", 16) client_pk = g^client_sk
+  // server_sk = int("0xAABBCCDDEEFF11223344556677889900AABBCCDDEEFF11223344556677889900", 16) shared_secret = client_pk^server_sk
+  // print("client_pk", format(int(client_pk), '#x'))
+  // print("server_sk", format(server_sk, '#x'))
+  // print("expected_ss", format(int(shared_secret), '#x'))
+  struct testInput {
+    int nid;
+    std::vector<uint8_t> client_pk;
+    std::vector<uint8_t> server_sk;
+    std::vector<uint8_t> expected_ss;
+  };
+  testInput testInputs[] = {
+      {NID_ffdhe2048,
+       HexToBytes(
+          "50f2d9e890e290c60618a15fb314b71f9b24f4942db80ef29d1de007b5fc7a89"
+          "2f80d15b4b22a131e505beebc98d27d96eaade29d293b035f8b38b64d8927b16"
+          "ff3aebb887e14c56f889f5bf9fc248a2bf7e575fcc112c53f01048fa5127459c"
+          "e06ca98cd961a3a3aa075688da64c4983ee44668fdef1dcabc7791e4906f9301"
+          "eb0189b35c768c9c5b8e819f78c998a631ff9ded899080c4fb3cbd264689059e"
+          "6d8adca7df629fde5c2c73aeef7c39b464ebe833689e6dd85e08dbfaad89bbf9"
+          "140d15b5b2b31ec9b046a891fde9503234bf1c7818ec44ce00c103787e971b23"
+          "b7214a93cdf98b4f1920ec1f55ddb4507b5e80301d068ab76ec3df34d440089a"),
+       HexToBytes(
+          "aabbccddeeff11223344556677889900aabbccddeeff11223344556677889900"),
+       HexToBytes(
+          "897396da313e171565c15595197c521862358a5071db94b50ac24952b5619c94"
+          "3e4fffdb56dcfcfae886709038553b1ec7e4b6f165454ff09250662f4ea65cd9"
+          "86b0040de370637e053495ba08cf649e6e53a5fcc58334496061f2cc8a375d32"
+          "293cd2979283bedd08a2eb9a53a0f106fa29c6775b4d45cdf6b8516afb41ebfa"
+          "3a487510d8f3c4d337a0af880271ebfa28b5551286cb3c3b2cb6a2cc35116816"
+          "5e0a3a1f930bc547149fd6dfe1dc7ad7945dd74a38d46a6bc7658ac953b43770"
+          "b5d9212737a3cef574796c50aaa4168f07ddabccf5d12d8f87808e526cf68e15"
+          "224b8eb822048df910fe36a84a752177dbfce76a90f1ae864543e721d7885ad7")},
+      {NID_ffdhe4096,
+       HexToBytes(
+          "525b74f0c4c3d942cd65f924cebd4f76a1ec2c866d48462e1c468f75070b18bc"
+          "d6f4ce8d874895d6a9d2ad55781fcc1406b61526d1667954674cf6bb2d873ad4"
+          "1128bb3f9412be3f452582bb9ea6091a39b05cd877a7774e52e44e9066a96cf2"
+          "f6829f96e6e26a892cca132ae31dc771b333f4f0e011a9c9c83b245865b24ff9"
+          "f6bda4adcdee17195518c58d6821f2819498631ab83a8a99e7f33bdd98d2821b"
+          "e01dbd8d83dcbee7d1302597354bef404f2f17cac5febfe7cc6c5860faa39ceb"
+          "236eceddf59c7d463071d2715612ed78c35d6e3783da3042862068cf206a08fe"
+          "ce83f60572db55c60f6f6811f359b6f1d504e33d3054c0fe083dc7e73030ed42"
+          "7f079ce60324e71e81fed25c11d2dc853a9fa9f2f64c33f92618d01b8b9bdde6"
+          "2792fbc353aeb97f370f0ef85bbbd0eccbfd7104f6c4e77c7b26ff380aedb4e4"
+          "f974706aa9b4c8eeb924c72d233aa90b8d0376f540ff4af63fa4a7baf47b035f"
+          "f2a1564080e2c31bfc4fad3834d021858e26e4710db3e37144332b909f3340a8"
+          "805b66a7cf042c37797bd46f784793e49cb16e3728e1fc6c98986d21027303ef"
+          "898d32caf0131c323518ced384a9b7ae0c45c15edcb054dfe7044af3ec616ce8"
+          "e5870ea2bef5aa40f4e65721d724ec68774638b13350abbb1f2ac22b0852c6e3"
+          "4ab2608390ec3b971021c0c20e18e2cbcc89b1eea1c2ecb1db6eeaf4195ec7f2"),
+       HexToBytes(
+          "aabbccddeeff11223344556677889900aabbccddeeff11223344556677889900"),
+       HexToBytes(
+          "ba7d5bb3682473327e80c07bcfd58a6af9bf0fa4662288291feb847cc8121ca6"
+          "12ff09bc9d46e3a76f44bad0006e1babdafef5091aed25e53037a9077af93bc5"
+          "76910dbc3e6d345174b36dbec2ab92e0744dc4f5d1d25596b9aa53bc10c22dfe"
+          "fec93c178b8ffd4388c07ffa9ad8a7f22c274066c92f8063b1665609aa224039"
+          "aff15fb5ac07b21f9c81aace529ad5c29688d6940996b5e3a47de1b8cd3b212a"
+          "3e534677df246375679cc014a77c3cc4e14aaa5eb4fc4d0f8a542a0e833a16f4"
+          "dc5c46f11c5ffe14152b9c7f9e504ae01ff84db158b9e48e9fbc46b99190cad2"
+          "e22113797dc7c81ad7c86bcd5e75405226459bb54b26fae179378e377ce5618e"
+          "65f04d2213e1991cefe991ec43272b6c7d93b51e2ccc3bf64486efd1e5c73b3b"
+          "f9344271ab9fbc43af41232ae7524c8213433ef39c64481e9cd06b9f9dc34226"
+          "85dfb2d69b8dc1af0f44d6f52d1d857ec28d93f459a23386ecfe5d97130e201d"
+          "90f159ff5995bbf766ceb38594b7a3192c99432e007b99f1ea7a828d15a1cba6"
+          "d86cd020ff64b1774cd35e33e3696a98574cedb64534f8ca88e2690709718d66"
+          "f4b88d759689819cde545d202b641b0529a02d588ff4c6b832c3f5a3d9bec9ec"
+          "ce0fb9af978b76bf93eba919c5bef844b4b1e2bff3d3758b577c70fa78d89a1d"
+          "d5a1864a2d3795c3668562c67aa77265f38812f001d28b25f7965109481ec2c7")
+      }
+  };
+  for (const testInput &test : testInputs ){
+    bssl::UniquePtr<BIGNUM> client_public(BN_bin2bn(test.client_pk.data(), test.client_pk.size(), nullptr));
+    EXPECT_TRUE(client_public);
+
+    bssl::UniquePtr<BIGNUM> server_secret(BN_bin2bn(test.server_sk.data(), test.server_sk.size(), nullptr));
+    EXPECT_TRUE(server_secret);
 
-  uint8_t buffer[sizeof(kPrime1536)];
-  ASSERT_EQ(BN_num_bytes(bn.get()), sizeof(kPrime1536));
-  ASSERT_EQ(BN_bn2bin(bn.get(), buffer), sizeof(kPrime1536));
-  EXPECT_EQ(Bytes(buffer), Bytes(kPrime1536));
+    bssl::UniquePtr<DH> ffdhe2048_dh(DH_new_by_nid(test.nid));
+    EXPECT_TRUE(DH_set0_key(ffdhe2048_dh.get(), nullptr, server_secret.release()));
+    uint8_t buffer[4096];
+    int size = DH_compute_key(buffer, client_public.get(), ffdhe2048_dh.get());
+    EXPECT_TRUE(size > 0 && size < 4096);
+
+    EXPECT_EQ(Bytes(buffer, size), Bytes(test.expected_ss));
+  }
 }
 
 TEST(DHTest, LeadingZeros) {
diff --git a/crypto/err/dh.errordata b/crypto/err/dh.errordata
index 9e1b87d85..1cc2d1360 100644
--- a/crypto/err/dh.errordata
+++ b/crypto/err/dh.errordata
@@ -4,3 +4,4 @@ DH,105,ENCODE_ERROR
 DH,101,INVALID_PUBKEY
 DH,102,MODULUS_TOO_LARGE
 DH,103,NO_PRIVATE_VALUE
+DH,106,INVALID_NID
diff --git a/crypto/fipsmodule/dh/dh.c b/crypto/fipsmodule/dh/dh.c
index 642b76927..14cf20b9e 100644
--- a/crypto/fipsmodule/dh/dh.c
+++ b/crypto/fipsmodule/dh/dh.c
@@ -86,6 +86,18 @@ DH *DH_new(void) {
   return dh;
 }
 
+DH *DH_new_by_nid(int nid) {
+  switch (nid) {
+    case NID_ffdhe2048:
+      return DH_get_rfc7919_2048();
+    case NID_ffdhe4096:
+      return DH_get_rfc7919_4096();
+    default:
+      OPENSSL_PUT_ERROR(DH, DH_R_INVALID_NID);
+      return NULL;
+  }
+}
+
 void DH_free(DH *dh) {
   if (dh == NULL) {
     return;
@@ -426,6 +438,38 @@ int DH_up_ref(DH *dh) {
   return 1;
 }
 
+// All the groups in RFC 7919 are of the form:
+// q = (p-1)/2
+// g = 2
+static DH *calculate_rfc7919_DH_from_p(const BN_ULONG data[], size_t data_len) {
+  BIGNUM *const ffdhe_p = BN_new();
+  BIGNUM *const ffdhe_q = BN_new();
+  BIGNUM *const ffdhe_g = BN_new();
+  DH *const dh = DH_new();
+
+  if (!ffdhe_p || !ffdhe_q || !ffdhe_g || !dh) {
+    goto err;
+  }
+
+  bn_set_static_words(ffdhe_p, data, data_len);
+
+  if (!BN_rshift1(ffdhe_q, ffdhe_p) ||
+      !BN_set_word(ffdhe_g, 2) ||
+      !DH_set0_pqg(dh, ffdhe_p, ffdhe_q, ffdhe_g)) {
+    goto err;
+  }
+
+  return dh;
+
+err:
+  BN_free(ffdhe_p);
+  BN_free(ffdhe_q);
+  BN_free(ffdhe_g);
+  DH_free(dh);
+  return NULL;
+
+}
+
 DH *DH_get_rfc7919_2048(void) {
   // This is the prime from https://tools.ietf.org/html/rfc7919#appendix-A.1,
   // which is specifically approved for FIPS in appendix D of SP 800-56Ar3.
@@ -448,30 +492,46 @@ DH *DH_get_rfc7919_2048(void) {
       TOBN(0xadf85458, 0xa2bb4a9a), TOBN(0xffffffff, 0xffffffff),
   };
 
-  BIGNUM *const ffdhe2048_p = BN_new();
-  BIGNUM *const ffdhe2048_q = BN_new();
-  BIGNUM *const ffdhe2048_g = BN_new();
-  DH *const dh = DH_new();
-
-  if (!ffdhe2048_p || !ffdhe2048_q || !ffdhe2048_g || !dh) {
-    goto err;
-  }
-
-  bn_set_static_words(ffdhe2048_p, kFFDHE2048Data,
-                      OPENSSL_ARRAY_SIZE(kFFDHE2048Data));
-
-  if (!BN_rshift1(ffdhe2048_q, ffdhe2048_p) ||
-      !BN_set_word(ffdhe2048_g, 2) ||
-      !DH_set0_pqg(dh, ffdhe2048_p, ffdhe2048_q, ffdhe2048_g)) {
-    goto err;
-  }
-
-  return dh;
+  return calculate_rfc7919_DH_from_p(kFFDHE2048Data, OPENSSL_ARRAY_SIZE(kFFDHE2048Data));
+}
 
- err:
-    BN_free(ffdhe2048_p);
-    BN_free(ffdhe2048_q);
-    BN_free(ffdhe2048_g);
-    DH_free(dh);
-    return NULL;
+DH *DH_get_rfc7919_4096(void) {
+    // This is the prime from https://tools.ietf.org/html/rfc7919#appendix-A.3,
+    // which is specifically approved for FIPS in appendix D of SP 800-56Ar3.
+    static const BN_ULONG kFFDHE4096Data[] = {
+        TOBN(0xFFFFFFFF, 0xFFFFFFFF),TOBN(0xC68A007E, 0x5E655F6A),
+        TOBN(0x4DB5A851, 0xF44182E1),TOBN(0x8EC9B55A, 0x7F88A46B),
+        TOBN(0x0A8291CD, 0xCEC97DCF),TOBN(0x2A4ECEA9, 0xF98D0ACC),
+        TOBN(0x1A1DB93D, 0x7140003C),TOBN(0x092999A3, 0x33CB8B7A),
+        TOBN(0x6DC778F9, 0x71AD0038),TOBN(0xA907600A, 0x918130C4),
+        TOBN(0xED6A1E01, 0x2D9E6832),TOBN(0x7135C886, 0xEFB4318A),
+        TOBN(0x87F55BA5, 0x7E31CC7A),TOBN(0x7763CF1D, 0x55034004),
+        TOBN(0xAC7D5F42, 0xD69F6D18),TOBN(0x7930E9E4, 0xE58857B6),
+        TOBN(0x6E6F52C3, 0x164DF4FB),TOBN(0x25E41D2B, 0x669E1EF1),
+        TOBN(0x3C1B20EE, 0x3FD59D7C),TOBN(0x0ABCD06B, 0xFA53DDEF),
+        TOBN(0x1DBF9A42, 0xD5C4484E),TOBN(0xABC52197, 0x9B0DEADA),
+        TOBN(0xE86D2BC5, 0x22363A0D),TOBN(0x5CAE82AB, 0x9C9DF69E),
+        TOBN(0x64F2E21E, 0x71F54BFF),TOBN(0xF4FD4452, 0xE2D74DD3),
+        TOBN(0xB4130C93, 0xBC437944),TOBN(0xAEFE1309, 0x85139270),
+        TOBN(0x598CB0FA, 0xC186D91C),TOBN(0x7AD91D26, 0x91F7F7EE),
+        TOBN(0x61B46FC9, 0xD6E6C907),TOBN(0xBC34F4DE, 0xF99C0238),
+        TOBN(0xDE355B3B, 0x6519035B),TOBN(0x886B4238, 0x611FCFDC),
+        TOBN(0xC6F34A26, 0xC1B2EFFA),TOBN(0xC58EF183, 0x7D1683B2),
+        TOBN(0x3BB5FCBC, 0x2EC22005),TOBN(0xC3FE3B1B, 0x4C6FAD73),
+        TOBN(0x8E4F1232, 0xEEF28183),TOBN(0x9172FE9C, 0xE98583FF),
+        TOBN(0xC03404CD, 0x28342F61),TOBN(0x9E02FCE1, 0xCDF7E2EC),
+        TOBN(0x0B07A7C8, 0xEE0A6D70),TOBN(0xAE56EDE7, 0x6372BB19),
+        TOBN(0x1D4F42A3, 0xDE394DF4),TOBN(0xB96ADAB7, 0x60D7F468),
+        TOBN(0xD108A94B, 0xB2C8E3FB),TOBN(0xBC0AB182, 0xB324FB61),
+        TOBN(0x30ACCA4F, 0x483A797A),TOBN(0x1DF158A1, 0x36ADE735),
+        TOBN(0xE2A689DA, 0xF3EFE872),TOBN(0x984F0C70, 0xE0E68B77),
+        TOBN(0xB557135E, 0x7F57C935),TOBN(0x85636555, 0x3DED1AF3),
+        TOBN(0x2433F51F, 0x5F066ED0),TOBN(0xD3DF1ED5, 0xD5FD6561),
+        TOBN(0xF681B202, 0xAEC4617A),TOBN(0x7D2FE363, 0x630C75D8),
+        TOBN(0xCC939DCE, 0x249B3EF9),TOBN(0xA9E13641, 0x146433FB),
+        TOBN(0xD8B9C583, 0xCE2D3695),TOBN(0xAFDC5620, 0x273D3CF1),
+        TOBN(0xADF85458, 0xA2BB4A9A),TOBN(0xFFFFFFFF, 0xFFFFFFFF)
+    };
+
+    return calculate_rfc7919_DH_from_p(kFFDHE4096Data, OPENSSL_ARRAY_SIZE(kFFDHE4096Data));
 }
diff --git a/crypto/fipsmodule/ec/ec_test.cc b/crypto/fipsmodule/ec/ec_test.cc
index 57d3d1d35..257253adb 100644
--- a/crypto/fipsmodule/ec/ec_test.cc
+++ b/crypto/fipsmodule/ec/ec_test.cc
@@ -2049,14 +2049,6 @@ TEST(ECTest, DISABLED_ScalarBaseMultVectorsTwoPoint) {
   });
 }
 
-static std::vector<uint8_t> HexToBytes(const char *str) {
-  std::vector<uint8_t> ret;
-  if (!DecodeHex(&ret, str)) {
-    abort();
-  }
-  return ret;
-}
-
 TEST(ECTest, DeriveFromSecret) {
   struct DeriveTest {
     int curve;
diff --git a/crypto/obj/obj_dat.h b/crypto/obj/obj_dat.h
index 296a537ab..8b1edb810 100644
--- a/crypto/obj/obj_dat.h
+++ b/crypto/obj/obj_dat.h
@@ -56,7 +56,7 @@
 
 /* This file is generated by crypto/obj/objects.go. */
 
-#define NUM_NID 976
+#define NUM_NID 978
 
 static const uint8_t kObjectData[] = {
     /* NID_rsadsi */
@@ -8848,6 +8848,8 @@ static const ASN1_OBJECT kObjects[NUM_NID] = {
     {"KYBER1024_R3", "KYBER1024_R3", NID_KYBER1024_R3, 0, NULL, 0},
     {"DILITHIUM3_R3", "DILITHIUM3_R3", NID_DILITHIUM3_R3, 11,
      &kObjectData[6232], 0},
+    {"ffdhe2048", "ffdhe2048", NID_ffdhe2048, 0, NULL, 0},
+    {"ffdhe4096", "ffdhe4096", NID_ffdhe4096, 0, NULL, 0},
 };
 
 static const uint16_t kNIDsInShortNameOrder[] = {
@@ -9204,6 +9206,8 @@ static const uint16_t kNIDsInShortNameOrder[] = {
     372 /* extendedStatus */,
     867 /* facsimileTelephoneNumber */,
     462 /* favouriteDrink */,
+    976 /* ffdhe2048 */,
+    977 /* ffdhe4096 */,
     857 /* freshestCRL */,
     453 /* friendlyCountry */,
     490 /* friendlyCountryName */,
@@ -10175,6 +10179,8 @@ static const uint16_t kNIDsInLongNameOrder[] = {
     56 /* extendedCertificateAttributes */,
     867 /* facsimileTelephoneNumber */,
     462 /* favouriteDrink */,
+    976 /* ffdhe2048 */,
+    977 /* ffdhe4096 */,
     453 /* friendlyCountry */,
     490 /* friendlyCountryName */,
     156 /* friendlyName */,
diff --git a/crypto/obj/obj_mac.num b/crypto/obj/obj_mac.num
index be8a3d2dd..2a7301cf5 100644
--- a/crypto/obj/obj_mac.num
+++ b/crypto/obj/obj_mac.num
@@ -964,3 +964,5 @@ KYBER512_R3		972
 KYBER768_R3		973
 KYBER1024_R3		974
 DILITHIUM3_R3		975
+ffdhe2048		976
+ffdhe4096		977
diff --git a/crypto/obj/objects.txt b/crypto/obj/objects.txt
index 487bcdc5e..35fead487 100644
--- a/crypto/obj/objects.txt
+++ b/crypto/obj/objects.txt
@@ -127,6 +127,10 @@ secg-ellipticCurve 37		: sect409r1
 secg-ellipticCurve 38		: sect571k1
 secg-ellipticCurve 39		: sect571r1
 
+# Finite field diffie hellman groups
+ : ffdhe2048
+ : ffdhe4096
+
 # WAP/TLS curve OIDs (http://www.wapforum.org/)
 !Alias wap-wsg-idm-ecid wap-wsg 4
 wap-wsg-idm-ecid 1	: wap-wsg-idm-ecid-wtls1
diff --git a/crypto/test/test_util.cc b/crypto/test/test_util.cc
index 23e8909fe..3a839601c 100644
--- a/crypto/test/test_util.cc
+++ b/crypto/test/test_util.cc
@@ -56,6 +56,14 @@ bool DecodeHex(std::vector<uint8_t> *out, const std::string &in) {
   return true;
 }
 
+std::vector<uint8_t> HexToBytes(const char *str) {
+  std::vector<uint8_t> ret;
+  if (!DecodeHex(&ret, str)) {
+    abort();
+  }
+  return ret;
+}
+
 std::string EncodeHex(bssl::Span<const uint8_t> in) {
   static const char kHexDigits[] = "0123456789abcdef";
   std::string ret;
diff --git a/crypto/test/test_util.h b/crypto/test/test_util.h
index 796c93177..655b3d787 100644
--- a/crypto/test/test_util.h
+++ b/crypto/test/test_util.h
@@ -64,6 +64,10 @@ std::ostream &operator<<(std::ostream &os, const Bytes &in);
 // string.
 bool DecodeHex(std::vector<uint8_t> *out, const std::string &in);
 
+// HexToBytes decodes |str| from hexadecimal and returns a new vector of bytes.
+// If |str| is invalid it aborts.
+std::vector<uint8_t> HexToBytes(const char *str);
+
 // EncodeHex returns |in| encoded in hexadecimal.
 std::string EncodeHex(bssl::Span<const uint8_t> in);
 
diff --git a/generated-src/err_data.c b/generated-src/err_data.c
index f2ba5e052..d9d2ec525 100644
--- a/generated-src/err_data.c
+++ b/generated-src/err_data.c
@@ -76,175 +76,176 @@ const uint32_t kOpenSSLReasonValues[] = {
     0xc3b00f7,
     0xc3b8921,
     0x10320892,
-    0x10329804,
-    0x10331810,
-    0x10339829,
-    0x1034183c,
-    0x10348fe1,
-    0x10350d1a,
-    0x1035984f,
-    0x10361879,
-    0x1036988c,
-    0x103718ab,
-    0x103798c4,
-    0x103818d9,
-    0x103898f7,
-    0x10391906,
-    0x10399922,
-    0x103a193d,
-    0x103a994c,
-    0x103b1968,
-    0x103b9983,
-    0x103c19a9,
+    0x10329810,
+    0x1033181c,
+    0x10339835,
+    0x10341848,
+    0x10348fed,
+    0x10350d26,
+    0x1035985b,
+    0x10361885,
+    0x10369898,
+    0x103718b7,
+    0x103798d0,
+    0x103818e5,
+    0x10389903,
+    0x10391912,
+    0x1039992e,
+    0x103a1949,
+    0x103a9958,
+    0x103b1974,
+    0x103b998f,
+    0x103c19b5,
     0x103c80f7,
-    0x103d19ba,
-    0x103d99ce,
-    0x103e19ed,
-    0x103e99fc,
-    0x103f1a13,
-    0x103f9a26,
+    0x103d19c6,
+    0x103d99da,
+    0x103e19f9,
+    0x103e9a08,
+    0x103f1a1f,
+    0x103f9a32,
     0x10400cde,
-    0x10409a39,
-    0x10411a57,
-    0x10419a6a,
-    0x10421a84,
-    0x10429a94,
-    0x10431aa8,
-    0x10439abe,
-    0x10441ad6,
-    0x10449aeb,
-    0x10451aff,
-    0x10459b11,
+    0x10409a45,
+    0x10411a63,
+    0x10419a76,
+    0x10421a90,
+    0x10429aa0,
+    0x10431ab4,
+    0x10439aca,
+    0x10441ae2,
+    0x10449af7,
+    0x10451b0b,
+    0x10459b1d,
     0x10460635,
     0x1046899a,
-    0x10471b26,
-    0x10479b3d,
-    0x10481b52,
-    0x10489b60,
-    0x10490f2d,
-    0x1049999a,
-    0x104a1864,
-    0x107c0fef,
+    0x10471b32,
+    0x10479b49,
+    0x10481b5e,
+    0x10489b6c,
+    0x10490f39,
+    0x104999a6,
+    0x104a1870,
+    0x107c0ffb,
     0x14320cc1,
     0x14328ccf,
     0x14330cde,
     0x14338cf0,
     0x143400b9,
     0x143480f7,
+    0x14350d01,
     0x18320090,
-    0x1832904c,
+    0x18329058,
     0x183300b9,
-    0x18339062,
-    0x18341076,
+    0x1833906e,
+    0x18341082,
     0x183480f7,
-    0x18351095,
-    0x183590ad,
-    0x183610c2,
-    0x183690d6,
-    0x1837110e,
-    0x18379124,
-    0x18381138,
-    0x18389148,
+    0x183510a1,
+    0x183590b9,
+    0x183610ce,
+    0x183690e2,
+    0x1837111a,
+    0x18379130,
+    0x18381144,
+    0x18389154,
     0x18390add,
-    0x18399158,
-    0x183a118d,
-    0x183a91e2,
-    0x183b0d39,
-    0x183b9231,
-    0x183c1243,
-    0x183c924e,
-    0x183d125e,
-    0x183d926f,
-    0x183e1280,
-    0x183e9292,
-    0x183f12bb,
-    0x183f92d4,
-    0x184012ec,
+    0x18399164,
+    0x183a1199,
+    0x183a91ee,
+    0x183b0d45,
+    0x183b923d,
+    0x183c124f,
+    0x183c925a,
+    0x183d126a,
+    0x183d927b,
+    0x183e128c,
+    0x183e929e,
+    0x183f12c7,
+    0x183f92e0,
+    0x184012f8,
     0x1840870d,
-    0x18411205,
-    0x184191d0,
-    0x184211ef,
-    0x18428d26,
-    0x1843116d,
-    0x18439217,
-    0x1844108b,
-    0x184490fa,
+    0x18411211,
+    0x184191dc,
+    0x184211fb,
+    0x18428d32,
+    0x18431179,
+    0x18439223,
+    0x18441097,
+    0x18449106,
     0x184509e0,
-    0x18fa117e,
-    0x18fa91a1,
-    0x18fb11b6,
-    0x20321326,
-    0x20329313,
-    0x2432143a,
+    0x18fa118a,
+    0x18fa91ad,
+    0x18fb11c2,
+    0x20321332,
+    0x2032931f,
+    0x24321446,
     0x243289e0,
-    0x2433144c,
-    0x24339459,
-    0x24341466,
-    0x24349478,
-    0x24351487,
-    0x243594a4,
-    0x243614b1,
-    0x243694bf,
-    0x243714cd,
-    0x243794f5,
-    0x243814fe,
-    0x2438950b,
-    0x2439151e,
-    0x243994db,
-    0x28320d0e,
-    0x28328d39,
+    0x24331458,
+    0x24339465,
+    0x24341472,
+    0x24349484,
+    0x24351493,
+    0x243594b0,
+    0x243614bd,
+    0x243694cb,
+    0x243714d9,
+    0x24379501,
+    0x2438150a,
+    0x24389517,
+    0x2439152a,
+    0x243994e7,
+    0x28320d1a,
+    0x28328d45,
     0x28330cde,
-    0x28338d4c,
-    0x28340d1a,
+    0x28338d58,
+    0x28340d26,
     0x283480b9,
     0x283500f7,
-    0x28358d26,
+    0x28358d32,
     0x2836099a,
-    0x2c323561,
-    0x2c329535,
-    0x2c33356f,
-    0x2c33b581,
-    0x2c343595,
-    0x2c34b5a7,
-    0x2c3535c2,
-    0x2c35b5d4,
-    0x2c363604,
+    0x2c32356d,
+    0x2c329541,
+    0x2c33357b,
+    0x2c33b58d,
+    0x2c3435a1,
+    0x2c34b5b3,
+    0x2c3535ce,
+    0x2c35b5e0,
+    0x2c363610,
     0x2c36833a,
-    0x2c373611,
-    0x2c37b63d,
-    0x2c38367b,
-    0x2c38b692,
-    0x2c3936b0,
-    0x2c39b6c0,
-    0x2c3a36d2,
-    0x2c3ab6e6,
-    0x2c3b36f7,
-    0x2c3bb716,
-    0x2c3c1547,
-    0x2c3c955d,
-    0x2c3d375b,
-    0x2c3d9576,
-    0x2c3e3785,
-    0x2c3eb793,
-    0x2c3f37ab,
-    0x2c3fb7c3,
-    0x2c4037ed,
-    0x2c409326,
-    0x2c4137fe,
-    0x2c41b811,
-    0x2c4212ec,
-    0x2c42b822,
+    0x2c37361d,
+    0x2c37b649,
+    0x2c383687,
+    0x2c38b69e,
+    0x2c3936bc,
+    0x2c39b6cc,
+    0x2c3a36de,
+    0x2c3ab6f2,
+    0x2c3b3703,
+    0x2c3bb722,
+    0x2c3c1553,
+    0x2c3c9569,
+    0x2c3d3767,
+    0x2c3d9582,
+    0x2c3e3791,
+    0x2c3eb79f,
+    0x2c3f37b7,
+    0x2c3fb7cf,
+    0x2c4037f9,
+    0x2c409332,
+    0x2c41380a,
+    0x2c41b81d,
+    0x2c4212f8,
+    0x2c42b82e,
     0x2c43076d,
-    0x2c43b708,
-    0x2c443650,
-    0x2c44b7d0,
-    0x2c4535e7,
-    0x2c45b623,
-    0x2c4636a0,
-    0x2c46b72a,
-    0x2c47373f,
-    0x2c47b778,
-    0x2c483662,
+    0x2c43b714,
+    0x2c44365c,
+    0x2c44b7dc,
+    0x2c4535f3,
+    0x2c45b62f,
+    0x2c4636ac,
+    0x2c46b736,
+    0x2c47374b,
+    0x2c47b784,
+    0x2c48366e,
     0x30320000,
     0x30328015,
     0x3033001f,
@@ -350,300 +351,300 @@ const uint32_t kOpenSSLReasonValues[] = {
     0x34348cab,
     0x34350c8f,
     0x3c320090,
-    0x3c328d76,
-    0x3c330d8f,
-    0x3c338daa,
-    0x3c340dc7,
-    0x3c348df1,
-    0x3c350e0c,
-    0x3c358e32,
-    0x3c360e4b,
-    0x3c368e63,
-    0x3c370e74,
-    0x3c378e82,
-    0x3c380e8f,
-    0x3c388ea3,
-    0x3c390d39,
-    0x3c398ec6,
-    0x3c3a0eda,
+    0x3c328d82,
+    0x3c330d9b,
+    0x3c338db6,
+    0x3c340dd3,
+    0x3c348dfd,
+    0x3c350e18,
+    0x3c358e3e,
+    0x3c360e57,
+    0x3c368e6f,
+    0x3c370e80,
+    0x3c378e8e,
+    0x3c380e9b,
+    0x3c388eaf,
+    0x3c390d45,
+    0x3c398ed2,
+    0x3c3a0ee6,
     0x3c3a895a,
-    0x3c3b0eea,
-    0x3c3b8f05,
-    0x3c3c0f17,
-    0x3c3c8f4a,
-    0x3c3d0f54,
-    0x3c3d8f68,
-    0x3c3e0f76,
-    0x3c3e8f9b,
-    0x3c3f0d62,
-    0x3c3f8f84,
+    0x3c3b0ef6,
+    0x3c3b8f11,
+    0x3c3c0f23,
+    0x3c3c8f56,
+    0x3c3d0f60,
+    0x3c3d8f74,
+    0x3c3e0f82,
+    0x3c3e8fa7,
+    0x3c3f0d6e,
+    0x3c3f8f90,
     0x3c4000b9,
     0x3c4080f7,
-    0x3c410de2,
-    0x3c418e21,
-    0x3c420f2d,
-    0x3c428eb7,
-    0x40321bf2,
-    0x40329c08,
-    0x40331c36,
-    0x40339c40,
-    0x40341c57,
-    0x40349c75,
-    0x40351c85,
-    0x40359c97,
-    0x40361ca4,
-    0x40369cb0,
-    0x40371cc5,
-    0x40379cd7,
-    0x40381ce2,
-    0x40389cf4,
-    0x40390fe1,
-    0x40399d04,
-    0x403a1d17,
-    0x403a9d38,
-    0x403b1d49,
-    0x403b9d59,
+    0x3c410dee,
+    0x3c418e2d,
+    0x3c420f39,
+    0x3c428ec3,
+    0x40321bfe,
+    0x40329c14,
+    0x40331c42,
+    0x40339c4c,
+    0x40341c63,
+    0x40349c81,
+    0x40351c91,
+    0x40359ca3,
+    0x40361cb0,
+    0x40369cbc,
+    0x40371cd1,
+    0x40379ce3,
+    0x40381cee,
+    0x40389d00,
+    0x40390fed,
+    0x40399d10,
+    0x403a1d23,
+    0x403a9d44,
+    0x403b1d55,
+    0x403b9d65,
     0x403c0071,
     0x403c8090,
-    0x403d1dba,
-    0x403d9dd0,
-    0x403e1ddf,
-    0x403e9e17,
-    0x403f1e31,
-    0x403f9e59,
-    0x40401e6e,
-    0x40409e82,
-    0x40411ebd,
-    0x40419ed8,
-    0x40421ef1,
-    0x40429f04,
-    0x40431f18,
-    0x40439f46,
-    0x40441f5d,
+    0x403d1dc6,
+    0x403d9ddc,
+    0x403e1deb,
+    0x403e9e23,
+    0x403f1e3d,
+    0x403f9e65,
+    0x40401e7a,
+    0x40409e8e,
+    0x40411ec9,
+    0x40419ee4,
+    0x40421efd,
+    0x40429f10,
+    0x40431f24,
+    0x40439f52,
+    0x40441f69,
     0x404480b9,
-    0x40451f72,
-    0x40459f84,
-    0x40461fa8,
-    0x40469fc8,
-    0x40471fd6,
-    0x40479ffd,
-    0x4048206e,
-    0x4048a128,
-    0x4049213f,
-    0x4049a159,
-    0x404a2170,
-    0x404aa18e,
-    0x404b21a6,
-    0x404ba1d3,
-    0x404c21e9,
-    0x404ca1fb,
-    0x404d221c,
-    0x404da255,
-    0x404e2269,
-    0x404ea276,
-    0x404f2310,
-    0x404fa386,
-    0x405023f5,
-    0x4050a409,
-    0x4051243c,
-    0x4052244c,
-    0x4052a470,
-    0x40532488,
-    0x4053a49b,
-    0x405424b0,
-    0x4054a4d3,
-    0x405524fe,
-    0x4055a53b,
-    0x40562560,
-    0x4056a579,
-    0x40572591,
-    0x4057a5a4,
-    0x405825b9,
-    0x4058a5e0,
-    0x4059260f,
-    0x4059a63c,
-    0x405a2650,
-    0x405aa660,
-    0x405b2678,
-    0x405ba689,
-    0x405c269c,
-    0x405ca6db,
-    0x405d26e8,
-    0x405da70d,
-    0x405e274b,
+    0x40451f7e,
+    0x40459f90,
+    0x40461fb4,
+    0x40469fd4,
+    0x40471fe2,
+    0x4047a009,
+    0x4048207a,
+    0x4048a134,
+    0x4049214b,
+    0x4049a165,
+    0x404a217c,
+    0x404aa19a,
+    0x404b21b2,
+    0x404ba1df,
+    0x404c21f5,
+    0x404ca207,
+    0x404d2228,
+    0x404da261,
+    0x404e2275,
+    0x404ea282,
+    0x404f231c,
+    0x404fa392,
+    0x40502401,
+    0x4050a415,
+    0x40512448,
+    0x40522458,
+    0x4052a47c,
+    0x40532494,
+    0x4053a4a7,
+    0x405424bc,
+    0x4054a4df,
+    0x4055250a,
+    0x4055a547,
+    0x4056256c,
+    0x4056a585,
+    0x4057259d,
+    0x4057a5b0,
+    0x405825c5,
+    0x4058a5ec,
+    0x4059261b,
+    0x4059a648,
+    0x405a265c,
+    0x405aa66c,
+    0x405b2684,
+    0x405ba695,
+    0x405c26a8,
+    0x405ca6e7,
+    0x405d26f4,
+    0x405da719,
+    0x405e2757,
     0x405e8b1b,
-    0x405f276c,
-    0x405fa779,
-    0x40602787,
-    0x4060a7a9,
-    0x4061280a,
-    0x4061a842,
-    0x40622859,
-    0x4062a86a,
-    0x406328b7,
-    0x4063a8cc,
-    0x406428e3,
-    0x4064a90f,
-    0x4065292a,
-    0x4065a941,
-    0x40662959,
-    0x4066a983,
-    0x406729ae,
-    0x4067aab1,
-    0x40682af9,
-    0x4068ab1a,
-    0x40692b4c,
-    0x4069ab7a,
-    0x406a2b9b,
-    0x406aabbb,
-    0x406b2d43,
-    0x406bad66,
-    0x406c2d7c,
-    0x406cb086,
-    0x406d30b5,
-    0x406db0dd,
-    0x406e310b,
-    0x406eb158,
-    0x406f31b1,
-    0x406fb1e9,
-    0x407031fc,
-    0x4070b219,
+    0x405f2778,
+    0x405fa785,
+    0x40602793,
+    0x4060a7b5,
+    0x40612816,
+    0x4061a84e,
+    0x40622865,
+    0x4062a876,
+    0x406328c3,
+    0x4063a8d8,
+    0x406428ef,
+    0x4064a91b,
+    0x40652936,
+    0x4065a94d,
+    0x40662965,
+    0x4066a98f,
+    0x406729ba,
+    0x4067aabd,
+    0x40682b05,
+    0x4068ab26,
+    0x40692b58,
+    0x4069ab86,
+    0x406a2ba7,
+    0x406aabc7,
+    0x406b2d4f,
+    0x406bad72,
+    0x406c2d88,
+    0x406cb092,
+    0x406d30c1,
+    0x406db0e9,
+    0x406e3117,
+    0x406eb164,
+    0x406f31bd,
+    0x406fb1f5,
+    0x40703208,
+    0x4070b225,
     0x4071084d,
-    0x4071b22b,
-    0x4072323e,
-    0x4072b274,
-    0x4073328c,
-    0x4073975f,
-    0x407432a0,
-    0x4074b2ba,
-    0x407532cb,
-    0x4075b2df,
-    0x407632ed,
-    0x4076950b,
-    0x40773312,
-    0x4077b352,
-    0x4078336d,
-    0x4078b3a6,
-    0x407933bd,
-    0x4079b3d3,
-    0x407a33ff,
-    0x407ab412,
-    0x407b3427,
-    0x407bb439,
-    0x407c346a,
-    0x407cb473,
-    0x407d2b35,
-    0x407da3ae,
-    0x407e3382,
-    0x407ea5f0,
-    0x407f1fea,
-    0x407fa1bd,
-    0x40802320,
-    0x4080a012,
-    0x4081245e,
-    0x4081a2c4,
-    0x408230f6,
-    0x40829d65,
-    0x408325cb,
-    0x4083a8f4,
-    0x40842026,
-    0x4084a628,
-    0x408526ad,
-    0x4085a7d1,
-    0x4086272d,
-    0x4086a3c8,
-    0x4087313c,
-    0x4087a81f,
-    0x40881da3,
-    0x4088aac4,
-    0x40891df2,
-    0x40899d7f,
-    0x408a2db4,
-    0x408a9b77,
-    0x408b344e,
-    0x408bb1c6,
-    0x408c26bd,
-    0x408c9baf,
-    0x408d210e,
-    0x408da058,
-    0x408e223e,
-    0x408ea51b,
-    0x408f2ad8,
-    0x408fa7ed,
-    0x409029cf,
-    0x4090a6ff,
-    0x40912d9c,
-    0x40919bd5,
-    0x40921e3f,
-    0x4092b177,
-    0x40933257,
-    0x4093a3d9,
-    0x4094203a,
-    0x4094adcd,
-    0x4095287b,
-    0x4095b3df,
-    0x40963123,
-    0x4096a339,
-    0x40972424,
-    0x4097a28d,
-    0x40981e9f,
-    0x4098a88f,
-    0x40993193,
-    0x4099a548,
-    0x409a24e1,
-    0x409a9b93,
-    0x409b2094,
-    0x409ba0bf,
-    0x409c3334,
-    0x409ca0e7,
-    0x409d22f5,
-    0x409da2da,
-    0x409e1f30,
-    0x409ea36e,
-    0x409f2356,
-    0x409fa087,
-    0x40a02396,
-    0x40a0a2a7,
-    0x40fa2a97,
-    0x40faa9f3,
-    0x40fb2a76,
-    0x40fbaa0d,
-    0x40fcaa55,
-    0x40fd2a2e,
-    0x41f42c6e,
-    0x41f92d00,
-    0x41fe2bf3,
-    0x41feaea9,
-    0x41ff2fd7,
-    0x42032c87,
-    0x42082ca9,
-    0x4208ace5,
-    0x42092bd7,
-    0x4209ad1f,
-    0x420a2c2e,
-    0x420aac0e,
-    0x420b2c4e,
-    0x420bacc7,
-    0x420c2ff3,
-    0x420caddd,
-    0x420d2e90,
-    0x420daec7,
-    0x42122efa,
-    0x42172fba,
-    0x4217af3c,
-    0x421c2f5e,
-    0x421f2f19,
-    0x4221306b,
-    0x42262f9d,
-    0x422b3049,
-    0x422bae6b,
-    0x422c302b,
-    0x422cae1e,
-    0x422d2df7,
-    0x422db00a,
-    0x422e2e4a,
-    0x42302f79,
-    0x4230aee1,
+    0x4071b237,
+    0x4072324a,
+    0x4072b280,
+    0x40733298,
+    0x4073976b,
+    0x407432ac,
+    0x4074b2c6,
+    0x407532d7,
+    0x4075b2eb,
+    0x407632f9,
+    0x40769517,
+    0x4077331e,
+    0x4077b35e,
+    0x40783379,
+    0x4078b3b2,
+    0x407933c9,
+    0x4079b3df,
+    0x407a340b,
+    0x407ab41e,
+    0x407b3433,
+    0x407bb445,
+    0x407c3476,
+    0x407cb47f,
+    0x407d2b41,
+    0x407da3ba,
+    0x407e338e,
+    0x407ea5fc,
+    0x407f1ff6,
+    0x407fa1c9,
+    0x4080232c,
+    0x4080a01e,
+    0x4081246a,
+    0x4081a2d0,
+    0x40823102,
+    0x40829d71,
+    0x408325d7,
+    0x4083a900,
+    0x40842032,
+    0x4084a634,
+    0x408526b9,
+    0x4085a7dd,
+    0x40862739,
+    0x4086a3d4,
+    0x40873148,
+    0x4087a82b,
+    0x40881daf,
+    0x4088aad0,
+    0x40891dfe,
+    0x40899d8b,
+    0x408a2dc0,
+    0x408a9b83,
+    0x408b345a,
+    0x408bb1d2,
+    0x408c26c9,
+    0x408c9bbb,
+    0x408d211a,
+    0x408da064,
+    0x408e224a,
+    0x408ea527,
+    0x408f2ae4,
+    0x408fa7f9,
+    0x409029db,
+    0x4090a70b,
+    0x40912da8,
+    0x40919be1,
+    0x40921e4b,
+    0x4092b183,
+    0x40933263,
+    0x4093a3e5,
+    0x40942046,
+    0x4094add9,
+    0x40952887,
+    0x4095b3eb,
+    0x4096312f,
+    0x4096a345,
+    0x40972430,
+    0x4097a299,
+    0x40981eab,
+    0x4098a89b,
+    0x4099319f,
+    0x4099a554,
+    0x409a24ed,
+    0x409a9b9f,
+    0x409b20a0,
+    0x409ba0cb,
+    0x409c3340,
+    0x409ca0f3,
+    0x409d2301,
+    0x409da2e6,
+    0x409e1f3c,
+    0x409ea37a,
+    0x409f2362,
+    0x409fa093,
+    0x40a023a2,
+    0x40a0a2b3,
+    0x40fa2aa3,
+    0x40faa9ff,
+    0x40fb2a82,
+    0x40fbaa19,
+    0x40fcaa61,
+    0x40fd2a3a,
+    0x41f42c7a,
+    0x41f92d0c,
+    0x41fe2bff,
+    0x41feaeb5,
+    0x41ff2fe3,
+    0x42032c93,
+    0x42082cb5,
+    0x4208acf1,
+    0x42092be3,
+    0x4209ad2b,
+    0x420a2c3a,
+    0x420aac1a,
+    0x420b2c5a,
+    0x420bacd3,
+    0x420c2fff,
+    0x420cade9,
+    0x420d2e9c,
+    0x420daed3,
+    0x42122f06,
+    0x42172fc6,
+    0x4217af48,
+    0x421c2f6a,
+    0x421f2f25,
+    0x42213077,
+    0x42262fa9,
+    0x422b3055,
+    0x422bae77,
+    0x422c3037,
+    0x422cae2a,
+    0x422d2e03,
+    0x422db016,
+    0x422e2e56,
+    0x42302f85,
+    0x4230aeed,
     0x44320778,
     0x44328787,
     0x44330793,
@@ -661,138 +662,138 @@ const uint32_t kOpenSSLReasonValues[] = {
     0x4439084d,
     0x4439885b,
     0x443a086e,
-    0x48321535,
-    0x48329547,
-    0x4833155d,
-    0x48339576,
-    0x4c3215b3,
-    0x4c3295c3,
-    0x4c3315d6,
-    0x4c3395f6,
+    0x48321541,
+    0x48329553,
+    0x48331569,
+    0x48339582,
+    0x4c3215bf,
+    0x4c3295cf,
+    0x4c3315e2,
+    0x4c339602,
     0x4c3400b9,
     0x4c3480f7,
-    0x4c351602,
-    0x4c359610,
-    0x4c36162c,
-    0x4c369652,
-    0x4c371661,
-    0x4c37966f,
-    0x4c381684,
-    0x4c389690,
-    0x4c3916b0,
-    0x4c3996da,
-    0x4c3a16f3,
-    0x4c3a970c,
+    0x4c35160e,
+    0x4c35961c,
+    0x4c361638,
+    0x4c36965e,
+    0x4c37166d,
+    0x4c37967b,
+    0x4c381690,
+    0x4c38969c,
+    0x4c3916bc,
+    0x4c3996e6,
+    0x4c3a16ff,
+    0x4c3a9718,
     0x4c3b0635,
-    0x4c3b9725,
-    0x4c3c1737,
-    0x4c3c9746,
-    0x4c3d175f,
-    0x4c3d8d01,
-    0x4c3e17cc,
-    0x4c3e976e,
-    0x4c3f17ee,
-    0x4c3f950b,
-    0x4c401784,
-    0x4c40959f,
-    0x4c4117bc,
-    0x4c41963f,
-    0x4c4217a8,
-    0x4c429587,
-    0x50323834,
-    0x5032b843,
-    0x5033384e,
-    0x5033b85e,
-    0x50343877,
-    0x5034b891,
-    0x5035389f,
-    0x5035b8b5,
-    0x503638c7,
-    0x5036b8dd,
-    0x503738f6,
-    0x5037b909,
-    0x50383921,
-    0x5038b932,
-    0x50393947,
-    0x5039b95b,
-    0x503a397b,
-    0x503ab991,
-    0x503b39a9,
-    0x503bb9bb,
-    0x503c39d7,
-    0x503cb9ee,
-    0x503d3a07,
-    0x503dba1d,
-    0x503e3a2a,
-    0x503eba40,
-    0x503f3a52,
+    0x4c3b9731,
+    0x4c3c1743,
+    0x4c3c9752,
+    0x4c3d176b,
+    0x4c3d8d0d,
+    0x4c3e17d8,
+    0x4c3e977a,
+    0x4c3f17fa,
+    0x4c3f9517,
+    0x4c401790,
+    0x4c4095ab,
+    0x4c4117c8,
+    0x4c41964b,
+    0x4c4217b4,
+    0x4c429593,
+    0x50323840,
+    0x5032b84f,
+    0x5033385a,
+    0x5033b86a,
+    0x50343883,
+    0x5034b89d,
+    0x503538ab,
+    0x5035b8c1,
+    0x503638d3,
+    0x5036b8e9,
+    0x50373902,
+    0x5037b915,
+    0x5038392d,
+    0x5038b93e,
+    0x50393953,
+    0x5039b967,
+    0x503a3987,
+    0x503ab99d,
+    0x503b39b5,
+    0x503bb9c7,
+    0x503c39e3,
+    0x503cb9fa,
+    0x503d3a13,
+    0x503dba29,
+    0x503e3a36,
+    0x503eba4c,
+    0x503f3a5e,
     0x503f83b3,
-    0x50403a65,
-    0x5040ba75,
-    0x50413a8f,
-    0x5041ba9e,
-    0x50423ab8,
-    0x5042bad5,
-    0x50433ae5,
-    0x5043baf5,
-    0x50443b12,
+    0x50403a71,
+    0x5040ba81,
+    0x50413a9b,
+    0x5041baaa,
+    0x50423ac4,
+    0x5042bae1,
+    0x50433af1,
+    0x5043bb01,
+    0x50443b1e,
     0x50448469,
-    0x50453b26,
-    0x5045bb44,
-    0x50463b57,
-    0x5046bb6d,
-    0x50473b7f,
-    0x5047bb94,
-    0x50483bba,
-    0x5048bbc8,
-    0x50493bdb,
-    0x5049bbf0,
-    0x504a3c06,
-    0x504abc16,
-    0x504b3c36,
-    0x504bbc49,
-    0x504c3c6c,
-    0x504cbc9a,
-    0x504d3cc7,
-    0x504dbce4,
-    0x504e3cff,
-    0x504ebd1b,
-    0x504f3d2d,
-    0x504fbd44,
-    0x50503d53,
+    0x50453b32,
+    0x5045bb50,
+    0x50463b63,
+    0x5046bb79,
+    0x50473b8b,
+    0x5047bba0,
+    0x50483bc6,
+    0x5048bbd4,
+    0x50493be7,
+    0x5049bbfc,
+    0x504a3c12,
+    0x504abc22,
+    0x504b3c42,
+    0x504bbc55,
+    0x504c3c78,
+    0x504cbca6,
+    0x504d3cd3,
+    0x504dbcf0,
+    0x504e3d0b,
+    0x504ebd27,
+    0x504f3d39,
+    0x504fbd50,
+    0x50503d5f,
     0x50508729,
-    0x50513d66,
-    0x5051bb04,
-    0x50523cac,
-    0x58321034,
-    0x5c329332,
-    0x5c33134b,
-    0x5c339356,
-    0x5c341370,
-    0x5c349383,
-    0x5c36139c,
-    0x5c3793bb,
-    0x5c3813e0,
-    0x5c3a93f4,
-    0x5c3b1406,
-    0x5c3b9423,
-    0x5c3c1326,
-    0x5c4113ad,
-    0x68320fe1,
-    0x68328d39,
-    0x68330d4c,
-    0x68339004,
-    0x68341014,
+    0x50513d72,
+    0x5051bb10,
+    0x50523cb8,
+    0x58321040,
+    0x5c32933e,
+    0x5c331357,
+    0x5c339362,
+    0x5c34137c,
+    0x5c34938f,
+    0x5c3613a8,
+    0x5c3793c7,
+    0x5c3813ec,
+    0x5c3a9400,
+    0x5c3b1412,
+    0x5c3b942f,
+    0x5c3c1332,
+    0x5c4113b9,
+    0x68320fed,
+    0x68328d45,
+    0x68330d58,
+    0x68339010,
+    0x68341020,
     0x683480f7,
     0x6835099a,
-    0x68668fef,
-    0x6c320fa7,
+    0x68668ffb,
+    0x6c320fb3,
     0x6c328cf0,
-    0x6c330fb2,
-    0x6c338fcb,
+    0x6c330fbe,
+    0x6c338fd7,
     0x74320a83,
     0x743280b9,
-    0x74330d01,
+    0x74330d0d,
     0x783209cb,
     0x783289e0,
     0x783309ec,
@@ -823,22 +824,22 @@ const uint32_t kOpenSSLReasonValues[] = {
     0x78458bf0,
     0x78460a2f,
     0x78468b30,
-    0x7c321302,
-    0x80321652,
+    0x7c32130e,
+    0x8032165e,
     0x80328090,
-    0x80333530,
+    0x8033353c,
     0x803380b9,
-    0x8034353f,
-    0x8034b4a7,
-    0x803534c5,
-    0x8035b553,
-    0x80363507,
-    0x8036b4b6,
-    0x803734f9,
-    0x8037b494,
-    0x8038351a,
-    0x8038b4d6,
-    0x803934eb,
+    0x8034354b,
+    0x8034b4b3,
+    0x803534d1,
+    0x8035b55f,
+    0x80363513,
+    0x8036b4c2,
+    0x80373505,
+    0x8037b4a0,
+    0x80383526,
+    0x8038b4e2,
+    0x803934f7,
 };
 
 const size_t kOpenSSLReasonValuesLen = sizeof(kOpenSSLReasonValues) / sizeof(kOpenSSLReasonValues[0]);
@@ -1017,6 +1018,7 @@ const char kOpenSSLReasonStringData[] =
     "INVALID_PUBKEY\0"
     "MODULUS_TOO_LARGE\0"
     "NO_PRIVATE_VALUE\0"
+    "INVALID_NID\0"
     "UNKNOWN_HASH\0"
     "BAD_Q_VALUE\0"
     "BAD_VERSION\0"
diff --git a/include/openssl/dh.h b/include/openssl/dh.h
index f8d48e80e..cb900d6f0 100644
--- a/include/openssl/dh.h
+++ b/include/openssl/dh.h
@@ -79,6 +79,10 @@ extern "C" {
 // DH_new returns a new, empty DH object or NULL on error.
 OPENSSL_EXPORT DH *DH_new(void);
 
+// DH_new_by_nid returns the DH specified by |nid|, only NID_ffdhe2048, and
+// NID_ffdhe4096 are supported. All other values will return null.
+OPENSSL_EXPORT DH *DH_new_by_nid(int nid);
+
 // DH_free decrements the reference count of |dh| and frees it if the reference
 // count drops to zero.
 OPENSSL_EXPORT void DH_free(DH *dh);
@@ -142,6 +146,11 @@ OPENSSL_EXPORT int DH_set_length(DH *dh, unsigned priv_length);
 // of memory.
 OPENSSL_EXPORT DH *DH_get_rfc7919_2048(void);
 
+// DH_get_rfc7919_4096 returns the group `ffdhe4096` from
+// https://tools.ietf.org/html/rfc7919#appendix-A.3. It returns NULL if out
+// of memory.
+OPENSSL_EXPORT DH *DH_get_rfc7919_4096(void);
+
 // BN_get_rfc3526_prime_1536 sets |*ret| to the 1536-bit MODP group from RFC
 // 3526 and returns |ret|. If |ret| is NULL then a fresh |BIGNUM| is allocated
 // and returned. It returns NULL on allocation failure.
@@ -371,5 +380,6 @@ BSSL_NAMESPACE_END
 #define DH_R_NO_PRIVATE_VALUE 103
 #define DH_R_DECODE_ERROR 104
 #define DH_R_ENCODE_ERROR 105
+#define DH_R_INVALID_NID 106
 
 #endif  // OPENSSL_HEADER_DH_H
diff --git a/include/openssl/nid.h b/include/openssl/nid.h
index 5889f1e22..f8440380f 100644
--- a/include/openssl/nid.h
+++ b/include/openssl/nid.h
@@ -4301,6 +4301,12 @@ extern "C" {
 #define NID_DILITHIUM3_R3 975
 #define OBJ_DILITHIUM3_R3 1L, 3L, 6L, 1L, 4L, 1L, 2L, 267L, 7L, 6L, 5L
 
+#define SN_ffdhe2048 "ffdhe2048"
+#define NID_ffdhe2048 976
+
+#define SN_ffdhe4096 "ffdhe4096"
+#define NID_ffdhe4096 977
+
 #if defined(__cplusplus)
 } /* extern C */
 #endif

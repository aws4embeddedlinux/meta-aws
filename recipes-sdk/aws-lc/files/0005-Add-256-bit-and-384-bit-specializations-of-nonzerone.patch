From b755265d6a1804cf80cb4a03075d51417ce36686 Mon Sep 17 00:00:00 2001
From: John Harrison <jargh@amazon.com>
Date: Tue, 29 Jun 2021 10:54:29 -0700
Subject: [PATCH] Add 256-bit and 384-bit specializations of nonzeroness test

The functions are bignum_nonzero_4 and bignum_nonzero_6, again in
the respective "p256" and "p384" subdirectories even though they
are only specific to the native sizes, not the particular primes.

s2n-bignum original commit: https://github.com/awslabs/s2n-bignum/commit/355736c621d486117a0e585776d91816ff724ce1
---
 arm/p384/Makefile           |  1 +
 arm/p384/bignum_nonzero_6.S | 51 +++++++++++++++++++++++++++++++++++++
 2 files changed, 52 insertions(+)
 create mode 100644 arm/p384/bignum_nonzero_6.S

diff --git a/arm/p384/Makefile b/arm/p384/Makefile
index 674acb61a..ea2657623 100644
--- a/arm/p384/Makefile
+++ b/arm/p384/Makefile
@@ -48,6 +48,7 @@ OBJ = bignum_add_p384.o \
       bignum_montsqr_p384.o \
       bignum_mux_6.o \
       bignum_neg_p384.o \
+      bignum_nonzero_6.o \
       bignum_optneg_p384.o \
       bignum_sub_p384.o \
       bignum_tomont_p384.o \
diff --git a/arm/p384/bignum_nonzero_6.S b/arm/p384/bignum_nonzero_6.S
new file mode 100644
index 000000000..f6c92c40f
--- /dev/null
+++ b/arm/p384/bignum_nonzero_6.S
@@ -0,0 +1,51 @@
+/*
+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "LICENSE" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+// ----------------------------------------------------------------------------
+// 384-bit nonzeroness test, returning 1 if x is nonzero, 0 if x is zero
+// Input x[6]; output function return
+//
+//    extern uint64_t bignum_nonzero_6(uint64_t x[static 6]);
+//
+// Standard ARM ABI: X0 = x, returns X0
+// ----------------------------------------------------------------------------
+
+#define x x0
+#define a x1
+#define d x2
+#define c x3
+
+.text
+.globl  bignum_nonzero_6
+
+bignum_nonzero_6:
+
+// Generate a = an OR of all the words in the bignum
+
+                ldp     a, d, [x]
+                orr     a, a, d
+                ldp     c, d, [x, 16]
+                orr     c, c, d
+                orr     a, a, c
+                ldp     c, d, [x, 32]
+                orr     c, c, d
+                orr     a, a, c
+
+// Set a standard C condition based on whether a is nonzero
+
+                cmp     a, xzr
+                cset    x0, ne
+
+                ret

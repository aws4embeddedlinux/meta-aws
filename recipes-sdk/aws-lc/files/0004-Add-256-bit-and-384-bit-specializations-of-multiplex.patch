From b040812f58cd5399a222b97fc50d065d4fe1b3e4 Mon Sep 17 00:00:00 2001
From: John Harrison <jargh@amazon.com>
Date: Mon, 28 Jun 2021 12:28:12 -0700
Subject: [PATCH] Add 256-bit and 384-bit specializations of multiplex/select

The functions are bignum_mux_4 and bignum_mux_6, and once again are
in the respective "p256" and "p384" subdirectories even though they
are only specific to the native sizes not the specific primes.

s2n-bignum original commit: https://github.com/awslabs/s2n-bignum/commit/415d2561dcb388e1cf9f2bf040aa0adcfa020042
---
 arm/p384/Makefile       |  1 +
 arm/p384/bignum_mux_6.S | 51 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 52 insertions(+)
 create mode 100644 arm/p384/bignum_mux_6.S

diff --git a/arm/p384/Makefile b/arm/p384/Makefile
index 33fbe6c6d..674acb61a 100644
--- a/arm/p384/Makefile
+++ b/arm/p384/Makefile
@@ -46,6 +46,7 @@ OBJ = bignum_add_p384.o \
       bignum_mod_p384_6.o \
       bignum_montmul_p384.o \
       bignum_montsqr_p384.o \
+      bignum_mux_6.o \
       bignum_neg_p384.o \
       bignum_optneg_p384.o \
       bignum_sub_p384.o \
diff --git a/arm/p384/bignum_mux_6.S b/arm/p384/bignum_mux_6.S
new file mode 100644
index 000000000..18118eac5
--- /dev/null
+++ b/arm/p384/bignum_mux_6.S
@@ -0,0 +1,51 @@
+/*
+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "LICENSE" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+// ----------------------------------------------------------------------------
+// 384-bit multiplex/select z := x (if p nonzero) or z := y (if p zero)
+// Inputs p, x[6], y[6]; output z[6]
+//
+//    extern void bignum_mux_6
+//     (uint64_t p, uint64_t z[static 6],
+//      uint64_t x[static 6], uint64_t y[static 6]);
+//
+// It is assumed that all numbers x, y and z have the same size 6 digits.
+//
+// Standard ARM ABI: X0 = p, X1 = z, X2 = x, X3 = y
+// ----------------------------------------------------------------------------
+
+#define p x0
+#define z x1
+#define x x2
+#define y x3
+#define a x4
+
+.text
+.globl bignum_mux_6
+
+bignum_mux_6:
+
+                cmp     p, 0                    // Set condition codes p = 0
+
+                .set    i, 0
+                .rep    6
+                ldr     a, [x, 8*i]
+                ldr     p, [y, 8*i]
+                csel    a, a, p, ne
+                str     a, [z, 8*i]
+                .set    i, (i+1)
+                .endr
+
+                ret

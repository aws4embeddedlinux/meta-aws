From 0b3b55b049a74bf1ddb871dbef6db24caa656cb8 Mon Sep 17 00:00:00 2001
From: Justin W Smith <103147162+justsmth@users.noreply.github.com>
Date: Mon, 20 Mar 2023 17:01:42 -0400
Subject: [PATCH] Remove docker images used for Rust crate gen (#888)

---
 tests/ci/docker_images/rust/README.md         | 31 -----------------
 tests/ci/docker_images/rust/build_images.sh   | 24 -------------
 .../docker_images/rust/linux-386/Dockerfile   | 21 ------------
 .../docker_images/rust/linux-arm64/Dockerfile | 34 -------------------
 .../rust/linux-x86_64/Dockerfile              | 21 ------------
 5 files changed, 131 deletions(-)
 delete mode 100644 tests/ci/docker_images/rust/README.md
 delete mode 100755 tests/ci/docker_images/rust/build_images.sh
 delete mode 100644 tests/ci/docker_images/rust/linux-386/Dockerfile
 delete mode 100644 tests/ci/docker_images/rust/linux-arm64/Dockerfile
 delete mode 100644 tests/ci/docker_images/rust/linux-x86_64/Dockerfile

diff --git a/tests/ci/docker_images/rust/README.md b/tests/ci/docker_images/rust/README.md
deleted file mode 100644
index 12a6a8d9a..000000000
--- a/tests/ci/docker_images/rust/README.md
+++ /dev/null
@@ -1,31 +0,0 @@
-# macOS Setup
-
-```
-$ docker buildx install
-```
-
-# Setup for AL2 or other Linux distributions
-The following setup is required for Docker in order to be able to build cross-platform images.
-
-By default, Docker Desktop is installed and configured with [Buildx](https://docs.docker.com/build/install-buildx/),
-but this is not installed by default on most Linux distributions of docker. The following steps are required to install
-on Amazon Linux 2.
-
-## Steps for AL2
-The following steps are required for Amazon Linux 2, note that symlink step is required due to a packaging bug in the
-current Docker RPM for AL2.
-
-```
-$ sudo ln -s /usr/libexec/docker/cli-plugins/buildx /usr/libexec/docker/cli-plugins/docker-buildx
-$ sudo systemctl restart docker
-$ docker buildx install
-$ sudo yum install -y qemu-system-aarch64 qemu-system-x86 qemu-user-binfmt
-$ docker buildx create --name=container --driver=docker-container --use
-$ docker run --privileged --rm tonistiigi/binfmt --install all
-```
-
-This may periodically need to be reset:
-```
-$ docker run --privileged --rm tonistiigi/binfmt --uninstall arm64,arm,riscv64,mips64le,s390x,ppc64le,mips64
-$ docker run --privileged --rm tonistiigi/binfmt --install all
-```
\ No newline at end of file
diff --git a/tests/ci/docker_images/rust/build_images.sh b/tests/ci/docker_images/rust/build_images.sh
deleted file mode 100755
index 76c37b1b4..000000000
--- a/tests/ci/docker_images/rust/build_images.sh
+++ /dev/null
@@ -1,24 +0,0 @@
-#!/bin/bash -ex
-# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
-# SPDX-License-Identifier: Apache-2.0 OR ISC
-
-########################################
-# Build images from AWS-LC GitHub repo #
-########################################
-
-# Linux hosts might not have "jq" installed.
-
-# Ubuntu:
-# sudo apt-get install jq
-
-# Amazon Linux:
-# sudo yum install jq
-
-
-# Log Docker hub limit https://docs.docker.com/docker-hub/download-rate-limit/#how-can-i-check-my-current-rate
-TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
-curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest
-
-docker build -t rust:linux-386 -f linux-386/Dockerfile --load ../dependencies
-docker build -t rust:linux-arm64 -f linux-arm64/Dockerfile --load ../dependencies
-docker build -t rust:linux-x86_64 -f linux-x86_64/Dockerfile --load ../dependencies
diff --git a/tests/ci/docker_images/rust/linux-386/Dockerfile b/tests/ci/docker_images/rust/linux-386/Dockerfile
deleted file mode 100644
index 69538fd2c..000000000
--- a/tests/ci/docker_images/rust/linux-386/Dockerfile
+++ /dev/null
@@ -1,21 +0,0 @@
-# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
-# SPDX-License-Identifier: Apache-2.0 OR ISC
-
-FROM --platform=linux/386 rust:latest
-
-SHELL ["/bin/bash", "-c"]
-ENV GOROOT=/usr/local/go
-ENV PATH="$GOROOT/bin:$PATH"
-
-RUN apt-get update && \
-    apt-get -y install clang cmake && \
-    rustup update && \
-    rustup component add rustfmt clippy && \
-    apt-get autoremove --purge -y && \
-    apt-get clean && \
-    apt-get autoclean && \
-    rm -rf /var/lib/apt/lists/* && \
-    rm -rf /tmp/*
-
-COPY install_common_dependencies.sh /
-RUN set -ex && /install_common_dependencies.sh && rm install_common_dependencies.sh
diff --git a/tests/ci/docker_images/rust/linux-arm64/Dockerfile b/tests/ci/docker_images/rust/linux-arm64/Dockerfile
deleted file mode 100644
index 36e0549c1..000000000
--- a/tests/ci/docker_images/rust/linux-arm64/Dockerfile
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
-# SPDX-License-Identifier: Apache-2.0 OR ISC
-
-# Download exactly what is needed using the sparse registry.
-# https://github.com/rust-lang/cargo/issues/10781
-# https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html
-
-FROM --platform=linux/arm64 rust:latest
-
-SHELL ["/bin/bash", "-c"]
-ENV GOROOT=/usr/local/go
-ENV PATH="$GOROOT/bin:$PATH"
-
-RUN apt-get update && \
-    apt-get -y install clang cmake && \
-    rustup update && \
-    rustup toolchain install nightly && \
-    rustup default nightly && \
-    rustup component add rustfmt clippy && \
-    cargo +nightly install -Z sparse-registry --debug cargo-ament-build && \
-    apt-get autoremove --purge -y && \
-    apt-get clean && \
-    apt-get autoclean && \
-    rm -rf /var/lib/apt/lists/* && \
-    rm -rf /tmp/*
-
-ENV CARGO_UNSTABLE_SPARSE_REGISTRY=true
-
-# Static FIPS build only supports clang.
-ENV CC=clang
-ENV CXX=clang++
-
-COPY install_common_dependencies.sh /
-RUN set -ex && /install_common_dependencies.sh && rm install_common_dependencies.sh
diff --git a/tests/ci/docker_images/rust/linux-x86_64/Dockerfile b/tests/ci/docker_images/rust/linux-x86_64/Dockerfile
deleted file mode 100644
index 25ac0b075..000000000
--- a/tests/ci/docker_images/rust/linux-x86_64/Dockerfile
+++ /dev/null
@@ -1,21 +0,0 @@
-# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
-# SPDX-License-Identifier: Apache-2.0 OR ISC
-
-FROM --platform=linux/amd64 rust:latest
-
-SHELL ["/bin/bash", "-c"]
-ENV GOROOT=/usr/local/go
-ENV PATH="$GOROOT/bin:$PATH"
-
-RUN apt-get update && \
-    apt-get -y install clang cmake && \
-    rustup update && \
-    rustup component add rustfmt clippy && \
-    apt-get autoremove --purge -y && \
-    apt-get clean && \
-    apt-get autoclean && \
-    rm -rf /var/lib/apt/lists/* && \
-    rm -rf /tmp/*
-
-COPY install_common_dependencies.sh /
-RUN set -ex && /install_common_dependencies.sh && rm install_common_dependencies.sh

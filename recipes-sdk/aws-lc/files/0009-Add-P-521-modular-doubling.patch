From 5e9a36bf19387440bfba2efb1a8629063f19b33c Mon Sep 17 00:00:00 2001
From: John Harrison <jargh@amazon.com>
Date: Tue, 13 Jul 2021 21:02:16 -0700
Subject: [PATCH] Add P-521 modular doubling

Plus a few straightforward "lexicographic" bignum_of_wordlist theorems,
in "common/bignum.ml".

s2n-bignum original commit: https://github.com/awslabs/s2n-bignum/commit/225b9e9fcf5f50f1dc860f9836d78f894de736a4
---
 arm/p521/Makefile             |  1 +
 arm/p521/bignum_double_p521.S | 62 +++++++++++++++++++++++++++++++++++
 2 files changed, 63 insertions(+)
 create mode 100644 arm/p521/bignum_double_p521.S

diff --git a/arm/p521/Makefile b/arm/p521/Makefile
index 5b209f900..9b1ba47f3 100644
--- a/arm/p521/Makefile
+++ b/arm/p521/Makefile
@@ -32,6 +32,7 @@ endif
 # List of object files
 
 OBJ = bignum_add_p521.o \
+      bignum_double_p521.o \
       bignum_sub_p521.o
 
 %.o : %.S ; cpp $< | $(GAS) -o $@ -
diff --git a/arm/p521/bignum_double_p521.S b/arm/p521/bignum_double_p521.S
new file mode 100644
index 000000000..807360fce
--- /dev/null
+++ b/arm/p521/bignum_double_p521.S
@@ -0,0 +1,62 @@
+/*
+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "LICENSE" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+// ----------------------------------------------------------------------------
+// Double modulo p_521, z := (2 * x) mod p_521, assuming x reduced
+// Input x[9]; output z[9]
+//
+//    extern void bignum_double_p521
+//     (uint64_t z[static 9], uint64_t x[static 9]);
+//
+// Standard ARM ABI: X0 = z, X1 = x
+// ----------------------------------------------------------------------------
+
+#define z x0
+#define x x1
+
+#define c x2
+#define h x3
+#define l x4
+
+.text
+.globl bignum_double_p521
+
+bignum_double_p521:
+
+// We can decide whether 2 * x >= p_521 just by 2 * x >= 2^521, which
+// amounts to whether the top word is >= 256
+
+                ldr     c, [x, 64]
+                subs    xzr, c, 256
+
+// Now if 2 * x >= p_521 we want 2 * x - p_521 = (2 * x + 1) - 2^521
+// and otherwise just 2 * x. Feed in the condition as the carry bit
+// to get 2 * x + [2 * x >= p_521] then just mask it off to 521 bits.
+
+                .set    i, 0
+                .rep 4
+                ldp     l, h, [x, 8*i]
+                adcs    l, l, l
+                adcs    h, h, h
+                stp     l, h, [z, 8*i]
+                .set    i, (i+2)
+                .endr
+
+                adc     c, c, c
+                and     c, c, 0x1FF
+                str     c, [z, 64]
+
+                ret
+

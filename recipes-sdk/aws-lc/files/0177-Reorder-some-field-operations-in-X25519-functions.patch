From 7bfe98f79c43fe213535bfa27f05c440c087719a Mon Sep 17 00:00:00 2001
From: John Harrison <jargh@amazon.com>
Date: Tue, 7 Mar 2023 21:04:14 -0800
Subject: [PATCH] Reorder some field operations in X25519 functions

In slightly different ways for ARM and x86.

s2n-bignum original commit: https://github.com/awslabs/s2n-bignum/commit/bf52775d206ecc9710ae439f131d0d879a273c9a
---
 arm/curve25519/curve25519_x25519.S         | 18 +++++++++---------
 arm/curve25519/curve25519_x25519_alt.S     | 18 +++++++++---------
 x86_att/curve25519/curve25519_x25519.S     |  4 +---
 x86_att/curve25519/curve25519_x25519_alt.S |  3 +--
 4 files changed, 20 insertions(+), 23 deletions(-)

diff --git a/arm/curve25519/curve25519_x25519.S b/arm/curve25519/curve25519_x25519.S
index 27e41644d..02407400a 100644
--- a/arm/curve25519/curve25519_x25519.S
+++ b/arm/curve25519/curve25519_x25519.S
@@ -889,7 +889,6 @@ S2N_BN_SYMBOL(curve25519_x25519):
 
 scalarloop:
 
-
 // sm = xm + zm; sn = xn + zn; dm = xm - zm; dn = xn - zn
 
         sub_twice4(dm,xm,zm)
@@ -897,8 +896,11 @@ scalarloop:
         sub_twice4(dn,xn,zn)
         add_twice4(sm,xm,zm)
 
+// ADDING: dmsn = dm * sn
 // DOUBLING: mux d = xt - zt and s = xt + zt for appropriate choice of (xt,zt)
 
+        mul_5(dmsn,sn,dm)
+
         lsr     x0, i, #6
         ldr     x2, [sp, x0, lsl #3]    // Exploiting scalar = sp exactly
         lsr     x2, x2, i
@@ -910,9 +912,7 @@ scalarloop:
         mux_4(d,dm,dn)
         mux_4(s,sm,sn)
 
-// ADDING: dmsn = dm * sn; dnsm = sm * dn
-
-        mul_5(dmsn,sn,dm)
+// ADDING: dnsm = sm * dn
 
         mul_5(dnsm,sm,dn)
 
@@ -924,8 +924,8 @@ scalarloop:
 // DOUBLING: s = (xt + zt)^2
 
         sub5_4(dpro,dmsn,dnsm)
-        add5_4(spro,dmsn,dnsm)
         sqr_4(s,s)
+        add5_4(spro,dmsn,dnsm)
         sqr_4(dpro,dpro)
 
 // DOUBLING: p = 4 * xt * zt = s - d
@@ -946,15 +946,15 @@ scalarloop:
 
         mul_4(xn,s,d)
 
+// ADDING: zm' = x * (dmsn - dnsm)^2
+
+        mul_4(zm,dpro,pointx)
+
 // DOUBLING: zn' = (4 * xt * zt) * ((xt - zt)^2 + 121666 * (4 * xt * zt))
 //               = p * (d + 121666 * p)
 
         mul_4(zn,p,e)
 
-// ADDING: zm' = x * (dmsn - dnsm)^2
-
-        mul_4(zm,dpro,pointx)
-
 // Loop down as far as 3 (inclusive)
 
         sub     i, i, #1
diff --git a/arm/curve25519/curve25519_x25519_alt.S b/arm/curve25519/curve25519_x25519_alt.S
index 5ae6c9fa1..97e9ddc2c 100644
--- a/arm/curve25519/curve25519_x25519_alt.S
+++ b/arm/curve25519/curve25519_x25519_alt.S
@@ -678,7 +678,6 @@ S2N_BN_SYMBOL(curve25519_x25519_alt):
 
 scalarloop:
 
-
 // sm = xm + zm; sn = xn + zn; dm = xm - zm; dn = xn - zn
 
         sub_twice4(dm,xm,zm)
@@ -686,8 +685,11 @@ scalarloop:
         sub_twice4(dn,xn,zn)
         add_twice4(sm,xm,zm)
 
+// ADDING: dmsn = dm * sn
 // DOUBLING: mux d = xt - zt and s = xt + zt for appropriate choice of (xt,zt)
 
+        mul_5(dmsn,sn,dm)
+
         lsr     x0, i, #6
         ldr     x2, [sp, x0, lsl #3]    // Exploiting scalar = sp exactly
         lsr     x2, x2, i
@@ -699,9 +701,7 @@ scalarloop:
         mux_4(d,dm,dn)
         mux_4(s,sm,sn)
 
-// ADDING: dmsn = dm * sn; dnsm = sm * dn
-
-        mul_5(dmsn,sn,dm)
+// ADDING: dnsm = sm * dn
 
         mul_5(dnsm,sm,dn)
 
@@ -713,8 +713,8 @@ scalarloop:
 // DOUBLING: s = (xt + zt)^2
 
         sub5_4(dpro,dmsn,dnsm)
-        add5_4(spro,dmsn,dnsm)
         sqr_4(s,s)
+        add5_4(spro,dmsn,dnsm)
         sqr_4(dpro,dpro)
 
 // DOUBLING: p = 4 * xt * zt = s - d
@@ -735,15 +735,15 @@ scalarloop:
 
         mul_4(xn,s,d)
 
+// ADDING: zm' = x * (dmsn - dnsm)^2
+
+        mul_4(zm,dpro,pointx)
+
 // DOUBLING: zn' = (4 * xt * zt) * ((xt - zt)^2 + 121666 * (4 * xt * zt))
 //               = p * (d + 121666 * p)
 
         mul_4(zn,p,e)
 
-// ADDING: zm' = x * (dmsn - dnsm)^2
-
-        mul_4(zm,dpro,pointx)
-
 // Loop down as far as 3 (inclusive)
 
         sub     i, i, #1
diff --git a/x86_att/curve25519/curve25519_x25519.S b/x86_att/curve25519/curve25519_x25519.S
index d83479a80..d103ec911 100644
--- a/x86_att/curve25519/curve25519_x25519.S
+++ b/x86_att/curve25519/curve25519_x25519.S
@@ -174,7 +174,6 @@
         movq   %r10, 0x10+P0 ;                  \
         movq   %r11, 0x18+P0
 
-
 // A version of multiplication that only guarantees output < 2 * p_25519.
 // This basically skips the +1 and final correction in quotient estimation.
 
@@ -695,9 +694,8 @@ scalarloop:
 
 // ADDING: dmsn = dm * sn; dnsm = sm * dn
 
-        mul_5(dmsn,sn,dm)
-
         mul_5(dnsm,sm,dn)
+        mul_5(dmsn,sn,dm)
 
 // DOUBLING: d = (xt - zt)^2
 
diff --git a/x86_att/curve25519/curve25519_x25519_alt.S b/x86_att/curve25519/curve25519_x25519_alt.S
index 5abfaf018..1d4ab64bc 100644
--- a/x86_att/curve25519/curve25519_x25519_alt.S
+++ b/x86_att/curve25519/curve25519_x25519_alt.S
@@ -855,9 +855,8 @@ scalarloop:
 
 // ADDING: dmsn = dm * sn; dnsm = sm * dn
 
-        mul_5(dmsn,sn,dm)
-
         mul_5(dnsm,sm,dn)
+        mul_5(dmsn,sn,dm)
 
 // DOUBLING: d = (xt - zt)^2
 
